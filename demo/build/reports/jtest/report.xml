<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="2016-05-03" climode="true" execEnv="linux_x86_64" hasViols="true" id="1461816765977" lang="en_US" machine="mar-VirtualBox" prjModule="com.parasoft:demo" project="" tag="${scontrol_branch}-linux_x86_64" time="2016-05-03T10:01:03-07:00" toolId="jtest" toolName="DTP Engine for Java" toolVer="10.2.2.20160325" user="mar">
   <TestConfig machine="mar-VirtualBox" name="Recommended Rules" pseudoUrl="builtin://Recommended Rules" user="mar" />
   <Authors>
      <Author id="dev1" name="mar" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.jtest.standards.checkers.xml" name="Parasoft XML Static Analyzer" ver="10.2.2.20160325" />
      <Analyzer id="com.parasoft.jtest.standards.checkers.rulewizard" name="Parasoft RuleWizard Static Analyzer" ver="10.2.2.20160325" />
      <Analyzer id="com.parasoft.jtest.standards.checkers.java" name="Parasoft Java Static Analyzer" ver="10.2.2.20160325" />
      <Analyzer id="com.parasoft.jtest.globals.ioc.springxml.analyzer.IOCAnalyzer" name="Parasoft IOC Analyzer" ver="10.2.2.20160325" />
      <Analyzer id="com.parasoft.xtest.dupcode.parser" name="Parasoft Code Duplication Parser" ver="10.2.2.20160315" />
      <Analyzer id="com.parasoft.jtest.standards.checkers.prop" name="Parasoft Properties Static Analyzer" ver="10.2.2.20160325" />
      <Analyzer id="com.parasoft.xtest.dupcode.detector" name="Parasoft Code Duplication Detector" ver="10.2.2.20160315" />
      <Analyzer id="com.parasoft.jtest.standards.metrics.analyzer" name="Parasoft Metrics Analyzer" ver="10.2.2.20160325" />
      <Analyzer id="com.parasoft.jtest.flowanalyzer" name="Parasoft Java Flow Analyzer" ver="10.2.2.20160331B30" />
      <Analyzer id="com.parasoft.jtest.flowanalyzer.graphservice" name="Parasoft Java Flow Graph Analyzer" ver="10.2.2.20160331B30" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IDupCodeViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Metrics>
      <Metric avg="1.646" disp="true" id="METRIC.CC" max="10" min="1" name="McCabe Cyclomatic Complexity" noi="268" stddev="1.254">
         <Info avg="1.646" disp="true" elem="com.parasoft:demo" max="10" min="1" noi="268" stddev="1.254" />
      </Metric>
      <Metric avg="0.377" disp="true" id="METRIC.NBD" max="8" min="0" name="Nested Blocks Depth" noi="268" stddev="0.794">
         <Info avg="0.377" disp="true" elem="com.parasoft:demo" max="8" min="0" noi="268" stddev="0.794" />
      </Metric>
      <Metric avg="62.552" disp="true" id="METRIC.NOPLIF" max="460" min="11" name="Number of Physical Lines in Files" noi="58" stddev="65.087">
         <Info avg="62.552" disp="true" elem="com.parasoft:demo" max="460" min="11" noi="58" stddev="65.087" />
      </Metric>
      <Metric avg="7.571" disp="true" id="METRIC.NOSLIM" max="40" min="1" name="Number of Source Lines in Methods" noi="268" stddev="5.907">
         <Info avg="7.571" disp="true" elem="com.parasoft:demo" max="40" min="1" noi="268" stddev="5.907" />
      </Metric>
   </Metrics>
   <Scope>
      <Repositories />
      <Locations>
         <Loc hash="1319322499" locRef="1" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/servlets/ExampleServlet.java" totLns="47" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/servlets/ExampleServlet.java" />
         <Loc hash="-1699179821" locRef="2" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/security/InputValidation.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/security/InputValidation.java" />
         <Loc hash="176097414" locRef="3" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/queue/Queue.java" totLns="94" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/queue/Queue.java" />
         <Loc hash="-1099120371" locRef="4" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/Customer.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/Customer.java" />
         <Loc hash="-671892205" locRef="5" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/ConnectionException.java" totLns="12" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/ConnectionException.java" />
         <Loc hash="1123922712" locRef="6" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/ITransaction.java" totLns="25" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/ITransaction.java" />
         <Loc hash="-747787682" locRef="7" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/LogAccountInfo.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/LogAccountInfo.java" />
         <Loc hash="-1648795582" locRef="8" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/DepositTransaction.java" totLns="28" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/DepositTransaction.java" />
         <Loc hash="-544346256" locRef="9" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/AbstractTransaction.java" totLns="17" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/AbstractTransaction.java" />
         <Loc hash="-1062638543" locRef="10" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/CreditCard.java" totLns="201" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/CreditCard.java" />
         <Loc hash="-908751267" locRef="11" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/WithdrawalTransaction.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/WithdrawalTransaction.java" />
         <Loc hash="513011559" locRef="12" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/Account.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/Account.java" />
         <Loc hash="580318164" locRef="13" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/nbank/Bank.java" totLns="62" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/nbank/Bank.java" />
         <Loc hash="-351736074" locRef="14" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stackmachine/RunnableStackMachine.java" totLns="460" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stackmachine/RunnableStackMachine.java" />
         <Loc hash="-1053362142" locRef="15" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stackmachine/AbstractStackMachine.java" totLns="128" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stackmachine/AbstractStackMachine.java" />
         <Loc hash="1404916178" locRef="16" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stackmachine/CommandLineStackMachine.java" totLns="102" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stackmachine/CommandLineStackMachine.java" />
         <Loc hash="549356038" locRef="17" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stackmachine/LifoStackMachine.java" totLns="45" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stackmachine/LifoStackMachine.java" />
         <Loc hash="-1737493900" locRef="18" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stackmachine/StackInterface.java" totLns="26" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stackmachine/StackInterface.java" />
         <Loc hash="-864598466" locRef="19" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stackmachine/StackList.java" totLns="113" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stackmachine/StackList.java" />
         <Loc hash="-1497331714" locRef="20" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stackmachine/FifoStackMachine.java" totLns="44" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stackmachine/FifoStackMachine.java" />
         <Loc hash="1479841785" locRef="21" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stackmachine/CustomListRenderer.java" totLns="32" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stackmachine/CustomListRenderer.java" />
         <Loc hash="530587698" locRef="22" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/metrics/MetricsExample.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/metrics/MetricsExample.java" />
         <Loc hash="140711041" locRef="23" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/eval/Simple.java" totLns="74" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/eval/Simple.java" />
         <Loc hash="2061096365" locRef="24" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/AlwaysCloseLogging.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/AlwaysCloseLogging.java" />
         <Loc hash="-158891849" locRef="25" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" />
         <Loc hash="-1127058647" locRef="26" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/AlwaysCloseGSS.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" />
         <Loc hash="1530525971" locRef="27" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/WebApplication.java" totLns="52" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/WebApplication.java" />
         <Loc hash="-1724845119" locRef="28" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" />
         <Loc hash="1801833364" locRef="29" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/AlwaysCloseRAFs.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" />
         <Loc hash="-152814826" locRef="30" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/SQLInjection.java" totLns="61" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/SQLInjection.java" />
         <Loc hash="275524582" locRef="31" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/FilesInjection.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/FilesInjection.java" />
         <Loc hash="-1929223117" locRef="32" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/AlwaysCloseSockets.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" />
         <Loc hash="2003324352" locRef="33" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/AlwaysCloseNIOChannels.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" />
         <Loc hash="646984787" locRef="34" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/IncorrectIteratorUsage.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" />
         <Loc hash="-1221225349" locRef="35" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/XMLInjection.java" totLns="41" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/XMLInjection.java" />
         <Loc hash="-1919107570" locRef="36" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/DereferenceBeforeNullCheck.java" totLns="54" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/DereferenceBeforeNullCheck.java" />
         <Loc hash="174869257" locRef="37" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/AlwaysCloseImages.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/AlwaysCloseImages.java" />
         <Loc hash="590524020" locRef="38" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/InefficientCollectionRemoval.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" />
         <Loc hash="1367099558" locRef="39" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/UnreachableCode.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/UnreachableCode.java" />
         <Loc hash="447699228" locRef="40" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/SystemInjection.java" totLns="65" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/SystemInjection.java" />
         <Loc hash="1932743615" locRef="41" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/InefficientMapRemoval.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/InefficientMapRemoval.java" />
         <Loc hash="-798223982" locRef="42" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/DivisionByZero.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/DivisionByZero.java" />
         <Loc hash="-180062161" locRef="43" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/UseBeforeInitialization.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/UseBeforeInitialization.java" />
         <Loc hash="1051480615" locRef="44" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/InefficientMapUsage.java" totLns="37" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/InefficientMapUsage.java" />
         <Loc hash="-1702800121" locRef="45" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/np/ExtendedNullPointer.java" totLns="59" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/np/ExtendedNullPointer.java" />
         <Loc hash="-306099231" locRef="46" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/np/MessageFormatter.java" totLns="17" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/np/MessageFormatter.java" />
         <Loc hash="-1912888609" locRef="47" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/np/NullPointer.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/np/NullPointer.java" />
         <Loc hash="34666450" locRef="48" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/np/SimpleNeverHappenedAndNotAcknowledgedByBD.java" totLns="41" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/np/SimpleNeverHappenedAndNotAcknowledgedByBD.java" />
         <Loc hash="359238969" locRef="49" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/np/MyDictionary.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/np/MyDictionary.java" />
         <Loc hash="-1762540449" locRef="50" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/flowanalysis/np/DatabaseObject.java" totLns="67" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/flowanalysis/np/DatabaseObject.java" />
         <Loc hash="1508281903" locRef="51" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stubs/Interpreter.java" totLns="28" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stubs/Interpreter.java" />
         <Loc hash="529854093" locRef="52" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stubs/FileExample.java" totLns="23" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stubs/FileExample.java" />
         <Loc hash="-2126764651" locRef="53" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/stubs/ConstructorExample.java" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/stubs/ConstructorExample.java" />
         <Loc hash="-1934516384" locRef="54" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/suppress/Example.java" totLns="11" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/suppress/Example.java" />
         <Loc hash="-2034535640" locRef="55" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/suppress/AllFileSuppress.java" totLns="15" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/suppress/AllFileSuppress.java" />
         <Loc hash="367971913" locRef="56" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/junit4/Money.java" totLns="107" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/junit4/Money.java" />
         <Loc hash="-1245593594" locRef="57" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/junit4/IMoney.java" totLns="46" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/junit4/IMoney.java" />
         <Loc hash="974414665" locRef="58" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="src/examples/junit4/MoneyBag.java" totLns="161" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/src/examples/junit4/MoneyBag.java" />
         <Loc hash="176853002" locRef="59" projId="com.parasoft:demo" projPath="/demo" project="com.parasoft:demo" resProjPath="META-INF/MANIFEST.MF" totLns="4" uri="file://mar-VirtualBox/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/META-INF/MANIFEST.MF" />
      </Locations>
   </Scope>
   
  <SetupProblems>
    <Problem sev="0" totErrs="1" type="IncompatibleSourceLevel" msg="The following rules are designed for Java 7 and ignore files from 'com.parasoft:demo' project which is compiled in Java 6">
      <ErrorList>
        <Error val="PB.RE.JLAY, PB.API.VENDOR, PB.RE.RCODE" />
      </ErrorList>
    </Problem>
    <Problem sev="0" totErrs="2" type="DependencySetupProblem" msg="Following dependencies does not exist:">
      <ErrorList>
        <Error val="/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/build/classes/main" />
        <Error val="/home/mar/Parasoft_tools/Jtest_10_2_2/jtest/examples/demo/build/resources/main" />
      </ErrorList>
    </Problem>
  </SetupProblems>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:40">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="59" checkedLns="3632" name="com.parasoft:demo" qfixErrs="0" suppErrs="0" totErrs="74" totFiles="59" totLns="3632" />
      </Projects>
      
  <FADetails>
    <HtmlDump value=".    InputValidation.java (87): Statement stmt = null;&#xa;.    InputValidation.java (88): ResultSet rs = null;&#xa;.    InputValidation.java (94): String query = &quot;SELECT * FROM users WHERE username='&quot; + username&#xa;.C   InputValidation.java (96): stmt = _connection.createStatement() // Allocated resource variable: stmt&#xa;.    InputValidation.java (97): rs = stmt.executeQuery(query) // Allocated resource variable: stmt&#xa;.    InputValidation.java (99): if (rs.next()) { // Allocated resource variable: stmt&#xa;.    InputValidation.java (101): return true; // Allocated resource variable: stmt&#xa;.P   InputValidation.java (110): } // Allocated resource variable: stmt" dumpId="1" />
    <HtmlDump value=".    InputValidation.java (87): Statement stmt = null;&#xa;.    InputValidation.java (88): ResultSet rs = null;&#xa;.    InputValidation.java (94): String query = &quot;SELECT * FROM users WHERE username='&quot; + username&#xa;.    InputValidation.java (96): stmt = _connection.createStatement()&#xa;.C   InputValidation.java (97): rs = stmt.executeQuery(query) // Allocated resource variable: rs&#xa;.    InputValidation.java (99): if (rs.next()) { // Allocated resource variable: rs&#xa;.    InputValidation.java (101): return true; // Allocated resource variable: rs&#xa;.P   InputValidation.java (110): } // Allocated resource variable: rs" dumpId="2" />
    <HtmlDump value=".C   InputValidation.java (129): Statement stmt = _connection.createStatement(); // Allocated resource variable: stmt&#xa;.    InputValidation.java (130): String query = &quot;INSERT INTO invalid_logins VALUES ('&quot; + username // Allocated resource variable: stmt&#xa;.    InputValidation.java (132): stmt.execute(query); // Allocated resource variable: stmt&#xa;.P   InputValidation.java (133): } // Allocated resource variable: stmt" dumpId="3" />
    <HtmlDump value=".    Customer.java (81): Connection connection = null;&#xa;.    Customer.java (82): PreparedStatement statement = null;&#xa;.    Customer.java (83): ResultSet resultSet = null;&#xa;.    Customer.java (86): Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;);&#xa;.C   Customer.java (87): connection = DriverManager.getConnection(&quot;bank&quot;, &quot;bank&quot;, &quot;system&quot;) // Allocated resource variable: connection&#xa;.    Customer.java (97): statement = connection.prepareStatement(&quot;select * from accounts where id=&quot; + _ssn) // Allocated resource variable: connection&#xa;.    Customer.java (98): resultSet = statement.executeQuery() // Allocated resource variable: connection&#xa;.    Customer.java (100): _name = resultSet.getString(0) // Allocated resource variable: connection&#xa;.    Customer.java (101): _ssn = resultSet.getString(2) // Allocated resource variable: connection&#xa;.    Customer.java (103): resultSet.close(); // Allocated resource variable: connection&#xa;.    Customer.java (104): statement.close(); // Allocated resource variable: connection&#xa;.    Customer.java (110): return true; // Allocated resource variable: connection&#xa;.P   Customer.java (111): } // Allocated resource variable: connection" dumpId="4" />
    <HtmlDump value=".    Customer.java (81): Connection connection = null;&#xa;.    Customer.java (82): PreparedStatement statement = null;&#xa;.    Customer.java (83): ResultSet resultSet = null;&#xa;.    Customer.java (86): Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;);&#xa;.    Customer.java (87): connection = DriverManager.getConnection(&quot;bank&quot;, &quot;bank&quot;, &quot;system&quot;)&#xa;.C   Customer.java (97): statement = connection.prepareStatement(&quot;select * from accounts where id=&quot; + _ssn) // Allocated resource variable: statement&#xa;!E   Customer.java (98): resultSet = statement.executeQuery() // PreparedStatement.executeQuery() throws: SQLException // Allocated resource variable: statement&#xa;.    Customer.java (105): catch (SQLException exception) // Allocated resource variable: statement&#xa;.    Customer.java (106): System.err.println(&quot;Error loading data from database: &quot; + exception.getMessage()); // Allocated resource variable: statement&#xa;.    Customer.java (107): return false; // Allocated resource variable: statement&#xa;.P   Customer.java (111): } // Allocated resource variable: statement" dumpId="5" />
    <HtmlDump value=".    Customer.java (81): Connection connection = null;&#xa;.    Customer.java (82): PreparedStatement statement = null;&#xa;.    Customer.java (83): ResultSet resultSet = null;&#xa;.    Customer.java (86): Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;);&#xa;.    Customer.java (87): connection = DriverManager.getConnection(&quot;bank&quot;, &quot;bank&quot;, &quot;system&quot;)&#xa;.    Customer.java (97): statement = connection.prepareStatement(&quot;select * from accounts where id=&quot; + _ssn)&#xa;.C   Customer.java (98): resultSet = statement.executeQuery() // Allocated resource variable: resultSet&#xa;!E   Customer.java (100): _name = resultSet.getString(0) // ResultSet.getString() throws: SQLException // Allocated resource variable: resultSet&#xa;.    Customer.java (105): catch (SQLException exception) // Allocated resource variable: resultSet&#xa;.    Customer.java (106): System.err.println(&quot;Error loading data from database: &quot; + exception.getMessage()); // Allocated resource variable: resultSet&#xa;.    Customer.java (107): return false; // Allocated resource variable: resultSet&#xa;.P   Customer.java (111): } // Allocated resource variable: resultSet" dumpId="6" />
    <HtmlDump value=".    LogAccountInfo.java (28): int balance = account.getBalance();&#xa;.       Account.java (59): return _balance;&#xa;.    LogAccountInfo.java (29): String id = account.getID();&#xa;.       Account.java (49): _customer.getSSN()&#xa;.          Customer.java (40): return _ssn;&#xa;.       Account.java (49): return _customer.getSSN();&#xa;.    LogAccountInfo.java (30): File file = new File(&quot;account&quot; + id);&#xa;.    LogAccountInfo.java (31): BufferedWriter out;&#xa;.C   LogAccountInfo.java (32): out = new BufferedWriter(new FileWriter(file)); // Allocated resource variable: new FileWriter(file)&#xa;!E   LogAccountInfo.java (33): out.write(id); // Writer.write() throws: IOException // Allocated resource variable: &amp;lt;Writer referenced by out&amp;gt;&#xa;.P   LogAccountInfo.java (36): } // Allocated resource variable: &amp;lt;Writer referenced by out&amp;gt;" dumpId="7" />
    <HtmlDump value=".C   WithdrawalTransaction.java (14): WithdrawalTransaction(int amount)&#xa;.P   WithdrawalTransaction.java (16): if (amount &amp;lt; 0 &amp;amp;&amp;amp; amount &amp;gt; MAX_WITHDRAW)" dumpId="8" />
    <HtmlDump value=".C   Account.java (36): setAccountStatus(int initial_balance)&#xa;.    Account.java (38): if (initial_balance &amp;lt; BALANCE_GOLD_MIN) {&#xa;.P   Account.java (40): initial_balance &amp;gt;= BALANCE_GOLD_MIN" dumpId="9" />
    <HtmlDump value=".C   AlwaysCloseLogging.java (8): ConsoleHandler handler = new ConsoleHandler(); // Allocated resource variable: new ConsoleHandler()&#xa;.    AlwaysCloseLogging.java (9): LogRecord record = new LogRecord(level, message); // Allocated resource variable: handler&#xa;.    AlwaysCloseLogging.java (10): handler.publish(record); // Allocated resource variable: handler&#xa;.P   AlwaysCloseLogging.java (11): } // Allocated resource variable: handler" dumpId="10" />
    <HtmlDump value="!    UseBeforeInConstructorInitialization.java (31): int minLoginLength = 7; // Point of Implicit Initialization // Not explicitly initialized value: this.minLoginLength&#xa;!    UseBeforeInConstructorInitialization.java (35): super(name, password); // Not explicitly initialized value: this.minLoginLength&#xa;.       UseBeforeInConstructorInitialization.java (17): this.name = name; // Not explicitly initialized value: this.minLoginLength&#xa;.       UseBeforeInConstructorInitialization.java (18): this.password = password; // Not explicitly initialized value: this.minLoginLength&#xa;!       UseBeforeInConstructorInitialization.java (19): checkData(); // Not explicitly initialized value: this.minLoginLength&#xa;.P         UseBeforeInConstructorInitialization.java (43): if (super.name.length() &amp;lt; this.minLoginLength) { // Not explicitly initialized value: this.minLoginLength&#xa;.C   UseBeforeInConstructorInitialization.java (31): int minLoginLength = 7; // Not explicitly initialized value: this.minLoginLength" dumpId="11" />
    <HtmlDump value=".C   UseBeforeInConstructorInitialization.java (31): int minLoginLength = 7; // Not explicitly initialized value: this.minLoginLength&#xa;!    UseBeforeInConstructorInitialization.java (35): super(name, password); // Not explicitly initialized value: this.minLoginLength&#xa;.       UseBeforeInConstructorInitialization.java (17): this.name = name; // Not explicitly initialized value: this.minLoginLength&#xa;.       UseBeforeInConstructorInitialization.java (18): this.password = password; // Not explicitly initialized value: this.minLoginLength&#xa;!       UseBeforeInConstructorInitialization.java (19): checkData(); // Not explicitly initialized value: this.minLoginLength&#xa;.P         UseBeforeInConstructorInitialization.java (43): super.name.length() &amp;lt; this.minLoginLength // Not explicitly initialized value: this.minLoginLength" dumpId="12" />
    <HtmlDump value=".C   AlwaysCloseGSS.java (10): GSSContext context = GSSManager.getInstance().createContext(tokens); // Allocated resource variable: context&#xa;.    AlwaysCloseGSS.java (11): byte[] inputBuff = new byte[256]; // Allocated resource variable: context&#xa;.    AlwaysCloseGSS.java (12): context.initSecContext(inputBuff, 0, 256); // Allocated resource variable: context&#xa;.P   AlwaysCloseGSS.java (14): } // Allocated resource variable: context" dumpId="13" />
    <HtmlDump value=".C   AlwaysCloseGSS.java (21): GSSContext context = null; // Null value carrier: context&#xa;!E   AlwaysCloseGSS.java (23): context = GSSManager.getInstance().createContext(tokens) // GSSManager.createContext() throws: GSSException // Null value carrier: context&#xa;.    AlwaysCloseGSS.java (27): catch (Exception ioe) // Null value carrier: context&#xa;.    AlwaysCloseGSS.java (28): System.out.println(&quot;Exception occured: &quot; + ioe); // Null value carrier: context&#xa;.P   AlwaysCloseGSS.java (30): context.dispose(); // Null value carrier: context" dumpId="14" />
    <HtmlDump value=".C   AlwaysCloseXMLEncDec.java (43): XMLEncoder encoder = null; // Null value carrier: encoder&#xa;!E   AlwaysCloseXMLEncDec.java (45): new XMLEncoder(out) // XMLEncoder.XMLEncoder() throws: RuntimeException // Null value carrier: encoder&#xa;.    AlwaysCloseXMLEncDec.java (49): catch (Exception e) // Null value carrier: encoder&#xa;.    AlwaysCloseXMLEncDec.java (50): System.out.println(&quot;Exception occured: &quot; + e); // Null value carrier: encoder&#xa;.P   AlwaysCloseXMLEncDec.java (52): encoder.close(); // Null value carrier: encoder" dumpId="15" />
    <HtmlDump value=".    AlwaysCloseXMLEncDec.java (58): Vector vObjs = new Vector();&#xa;.C   AlwaysCloseXMLEncDec.java (59): XMLDecoder decoder = null; // Null value carrier: decoder&#xa;!E   AlwaysCloseXMLEncDec.java (61): new XMLDecoder(in) // XMLDecoder.XMLDecoder() throws: ArrayIndexOutOfBoundsException // Null value carrier: decoder&#xa;.    AlwaysCloseXMLEncDec.java (67): catch (ArrayIndexOutOfBoundsException endException) { // Null value carrier: decoder&#xa;.P   AlwaysCloseXMLEncDec.java (72): decoder.close(); // Null value carrier: decoder" dumpId="16" />
    <HtmlDump value=".    AlwaysCloseRAFs.java (8): String res = null;&#xa;.C   AlwaysCloseRAFs.java (10): RandomAccessFile raf = new RandomAccessFile(sFileName, sMode); // Allocated resource variable: new RandomAccessFile(sFileName, sMode)&#xa;.    AlwaysCloseRAFs.java (11): byte[] bytes = new byte[512]; // Allocated resource variable: raf&#xa;!E   AlwaysCloseRAFs.java (12): int read = raf.read(bytes, offset, bytes.length); // RandomAccessFile.read() throws: IOException // Allocated resource variable: raf&#xa;.P   AlwaysCloseRAFs.java (14): } // Allocated resource variable: raf" dumpId="17" />
    <HtmlDump value=".    AlwaysCloseRAFs.java (22): String res = null;&#xa;.C   AlwaysCloseRAFs.java (23): RandomAccessFile raf = null; // Null value carrier: raf&#xa;!E   AlwaysCloseRAFs.java (25): new RandomAccessFile(sFileName, sMode) // RandomAccessFile.RandomAccessFile() throws: FileNotFoundException // Null value carrier: raf&#xa;.    AlwaysCloseRAFs.java (29): catch (Exception e) // Null value carrier: raf&#xa;.    AlwaysCloseRAFs.java (30): System.out.println(); // Null value carrier: raf&#xa;.P   AlwaysCloseRAFs.java (32): raf.close(); // Null value carrier: raf" dumpId="18" />
    <HtmlDump value=".C   FilesInjection.java (23): FileOutputStream fOut = null; // Null value carrier: fOut&#xa;.    FilesInjection.java (25): String sFileName = storyName; // Null value carrier: fOut&#xa;!E   FilesInjection.java (26): new FileOutputStream(sFileName) // FileOutputStream.FileOutputStream() throws: FileNotFoundException // Null value carrier: fOut&#xa;.P   FilesInjection.java (29): fOut.close(); // Null value carrier: fOut" dumpId="19" />
    <HtmlDump value=".C   AlwaysCloseSockets.java (11): Socket sock = srvSocket.accept(); // Allocated resource variable: sock&#xa;.P   AlwaysCloseSockets.java (13): } // Allocated resource variable: sock" dumpId="20" />
    <HtmlDump value=".C   AlwaysCloseSockets.java (20): Socket sock = null; // Null value carrier: sock&#xa;!E   AlwaysCloseSockets.java (22): sock = srvSocket.accept() // ServerSocket.accept() throws: IOException // Null value carrier: sock&#xa;.    AlwaysCloseSockets.java (24): catch (IOException ioe) // Null value carrier: sock&#xa;.    AlwaysCloseSockets.java (25): System.out.println(&quot;Exception occured: &quot; + ioe); // Null value carrier: sock&#xa;.P   AlwaysCloseSockets.java (27): sock.close(); // Null value carrier: sock" dumpId="21" />
    <HtmlDump value=".C   AlwaysCloseNIOChannels.java (11): FileInputStream fInput = new FileInputStream(filename); // Allocated resource variable: new FileInputStream(filename)&#xa;!    AlwaysCloseNIOChannels.java (12): FileChannel channel = fInput.getChannel(); // Allocated resource variable: fInput&#xa;.    AlwaysCloseNIOChannels.java (13): ByteBuffer dst = ByteBuffer.allocate(512); // Allocated resource variable: fInput, &amp;lt;FileInputStream referenced by channel&amp;gt;, &amp;lt;FileInputStream referenced by fInput.getChannel()&amp;gt;&#xa;.    AlwaysCloseNIOChannels.java (14): int read = channel.read(dst); // Allocated resource variable: fInput, &amp;lt;FileInputStream referenced by channel&amp;gt;, &amp;lt;FileInputStream referenced by fInput.getChannel()&amp;gt;&#xa;.P   AlwaysCloseNIOChannels.java (16): } // Allocated resource variable: fInput, &amp;lt;FileInputStream referenced by channel&amp;gt;, &amp;lt;FileInputStream referenced by fInput.getChannel()&amp;gt;" dumpId="22" />
    <HtmlDump value=".    AlwaysCloseNIOChannels.java (11): FileInputStream fInput = new FileInputStream(filename);&#xa;.C   AlwaysCloseNIOChannels.java (12): FileChannel channel = fInput.getChannel(); // Allocated resource variable: &amp;lt;FileInputStream referenced by channel&amp;gt;.getChannel(), fInput.getChannel(), channel&#xa;.    AlwaysCloseNIOChannels.java (13): ByteBuffer dst = ByteBuffer.allocate(512); // Allocated resource variable: &amp;lt;FileInputStream referenced by channel&amp;gt;.getChannel(), fInput.getChannel(), channel&#xa;.    AlwaysCloseNIOChannels.java (14): int read = channel.read(dst); // Allocated resource variable: &amp;lt;FileInputStream referenced by channel&amp;gt;.getChannel(), fInput.getChannel(), channel&#xa;.P   AlwaysCloseNIOChannels.java (16): } // Allocated resource variable: &amp;lt;FileInputStream referenced by channel&amp;gt;.getChannel(), fInput.getChannel(), channel" dumpId="23" />
    <HtmlDump value=".C   AlwaysCloseNIOChannels.java (23): FileChannel channel = null; // Null value carrier: channel&#xa;!E   AlwaysCloseNIOChannels.java (25): new FileInputStream(filename) // FileInputStream.FileInputStream() throws: FileNotFoundException // Null value carrier: channel&#xa;.    AlwaysCloseNIOChannels.java (30): catch (Exception ioe) // Null value carrier: channel&#xa;.    AlwaysCloseNIOChannels.java (31): System.out.println(&quot;Exception occured: &quot; + ioe); // Null value carrier: channel&#xa;.P   AlwaysCloseNIOChannels.java (33): channel.close(); // Null value carrier: channel" dumpId="24" />
    <HtmlDump value=".C   IncorrectIteratorUsage.java (14): Iterator iter = collection.iterator(); // Tracked iterators: iter // Tracked collections: collection&#xa;.    IncorrectIteratorUsage.java (15): while (iter.hasNext()) { // Tracked iterators: iter // Tracked collections: collection&#xa;.    IncorrectIteratorUsage.java (16): Object obj = iter.next(); // Tracked iterators: iter // Tracked collections: collection&#xa;.    IncorrectIteratorUsage.java (17): if (tp.isAssignableFrom(obj.getClass())) { // Tracked iterators: iter // Tracked collections: collection&#xa;!    IncorrectIteratorUsage.java (20): collection.remove(obj); // Collection Modification Point // Tracked iterators: iter // Tracked collections: collection&#xa;.P   IncorrectIteratorUsage.java (15): iter.hasNext() // Tracked iterators: iter // Tracked collections: collection" dumpId="25" />
    <HtmlDump value=".    AlwaysCloseImages.java (11): Image image = null;&#xa;.C   AlwaysCloseImages.java (13): ImageReader imgReader = spi.createReaderInstance(); // Allocated resource variable: imgReader&#xa;.    AlwaysCloseImages.java (14): image = imgReader.read(0) // Allocated resource variable: imgReader&#xa;.P   AlwaysCloseImages.java (15): } // Allocated resource variable: imgReader" dumpId="26" />
    <HtmlDump value=".    AlwaysCloseImages.java (23): Image image = null;&#xa;.C   AlwaysCloseImages.java (24): ImageReader imgReader = null; // Null value carrier: imgReader&#xa;!E   AlwaysCloseImages.java (26): imgReader = spi.createReaderInstance() // ImageReaderSpi.createReaderInstance() throws: IOException // Null value carrier: imgReader&#xa;.    AlwaysCloseImages.java (28): catch (Exception e) // Null value carrier: imgReader&#xa;.    AlwaysCloseImages.java (29): System.out.println(&quot;Exception occured: &quot; + e); // Null value carrier: imgReader&#xa;.P   AlwaysCloseImages.java (31): imgReader.dispose(); // Null value carrier: imgReader" dumpId="27" />
    <HtmlDump value=".C   InefficientCollectionRemoval.java (14): Iterator iter = collection.iterator(); // Tracked iterators: iter // Tracked collections: collection&#xa;.    InefficientCollectionRemoval.java (15): while (iter.hasNext()) { // Tracked iterators: iter // Tracked collections: collection&#xa;.    InefficientCollectionRemoval.java (16): Object element = iter.next(); // Tracked iterators: iter // Tracked collections: collection&#xa;!    InefficientCollectionRemoval.java (17): collection.remove(element); // Collection Modification Point // Tracked iterators: iter // Tracked collections: collection&#xa;.P   InefficientCollectionRemoval.java (15): iter.hasNext() // Tracked iterators: iter // Tracked collections: collection" dumpId="28" />
    <HtmlDump value=".C   UnreachableCode.java (8): printCalculationResult(Object result)&#xa;.    UnreachableCode.java (10): if (result instanceof Exception) {&#xa;.P   UnreachableCode.java (13): if (result instanceof RuntimeException) {" dumpId="29" />
    <HtmlDump value=".C   UnreachableCode.java (21): guessFigure(boolean round, boolean volumetric)&#xa;.    UnreachableCode.java (23): final int figure;&#xa;.    UnreachableCode.java (24): if (round &amp;amp;&amp;amp; volumetric) {&#xa;.    UnreachableCode.java (26): if (round &amp;amp;&amp;amp; !volumetric) {&#xa;.P   UnreachableCode.java (28): !round" dumpId="30" />
    <HtmlDump value=".C   InefficientMapRemoval.java (14): Iterator iter = map.keySet().iterator(); // Tracked iterators: iter // Tracked collections: map&#xa;.    InefficientMapRemoval.java (15): while (iter.hasNext()) { // Tracked iterators: iter // Tracked collections: map&#xa;.    InefficientMapRemoval.java (16): Object key = iter.next(); // Tracked iterators: iter // Tracked collections: map&#xa;!    InefficientMapRemoval.java (17): map.remove(key); // Collection Modification Point // Tracked iterators: iter // Tracked collections: map&#xa;.P   InefficientMapRemoval.java (15): iter.hasNext() // Tracked iterators: iter // Tracked collections: map" dumpId="31" />
    <HtmlDump value=".C   InefficientMapRemoval.java (27): Iterator iter = map.entrySet().iterator(); // Tracked iterators: iter // Tracked collections: map&#xa;.    InefficientMapRemoval.java (28): while (iter.hasNext()) { // Tracked iterators: iter // Tracked collections: map&#xa;.    InefficientMapRemoval.java (29): Map.Entry entry = (Map.Entry)iter.next(); // Tracked iterators: iter // Tracked collections: map&#xa;.    InefficientMapRemoval.java (30): Object key = entry.getKey(); // Tracked iterators: iter // Tracked collections: map&#xa;!    InefficientMapRemoval.java (31): map.remove(key); // Collection Modification Point // Tracked iterators: iter // Tracked collections: map&#xa;.P   InefficientMapRemoval.java (28): iter.hasNext() // Tracked iterators: iter // Tracked collections: map" dumpId="32" />
    <HtmlDump value=".C   DivisionByZero.java (12): calculateDiscountedSum(int code, float initialSum, Consumer person)&#xa;.    DivisionByZero.java (14): float discountedSum = calculateCommonDiscountedSum(initialSum);&#xa;.       DivisionByZero.java (38): float discountedSum = 0.0f;&#xa;.       DivisionByZero.java (39): if (initialSum &amp;gt; 5.0f) {&#xa;.       DivisionByZero.java (42): if (initialSum &amp;lt; 5.0f) {&#xa;.       DivisionByZero.java (45): return discountedSum;&#xa;.    DivisionByZero.java (16): if (code == PERSONAL_DISCOUNT) {&#xa;.P   DivisionByZero.java (17): if (code == DISCOUNT) {" dumpId="33" />
    <HtmlDump value=".C   DivisionByZero.java (12): calculateDiscountedSum(int code, float initialSum, Consumer person)&#xa;.    DivisionByZero.java (14): float discountedSum = calculateCommonDiscountedSum(initialSum);&#xa;.       DivisionByZero.java (38): float discountedSum = 0.0f;&#xa;.       DivisionByZero.java (39): if (initialSum &amp;gt; 5.0f) {&#xa;.       DivisionByZero.java (42): if (initialSum &amp;lt; 5.0f) {&#xa;.       DivisionByZero.java (45): return discountedSum;&#xa;.    DivisionByZero.java (16): if (code == PERSONAL_DISCOUNT) {&#xa;.    DivisionByZero.java (17): if (code == DISCOUNT) {&#xa;.P   DivisionByZero.java (18): if (code == SPECIAL_OFFER) {" dumpId="34" />
    <HtmlDump value=".C   DivisionByZero.java (12): calculateDiscountedSum(int code, float initialSum, Consumer person)&#xa;.    DivisionByZero.java (14): float discountedSum = calculateCommonDiscountedSum(initialSum);&#xa;.       DivisionByZero.java (38): float discountedSum = 0.0f;&#xa;.       DivisionByZero.java (39): if (initialSum &amp;gt; 5.0f) {&#xa;.       DivisionByZero.java (42): if (initialSum &amp;lt; 5.0f) {&#xa;.       DivisionByZero.java (45): return discountedSum;&#xa;.    DivisionByZero.java (16): if (code == PERSONAL_DISCOUNT) {&#xa;.    DivisionByZero.java (22): if (code == PERSONAL_DISCOUNT) {&#xa;.    DivisionByZero.java (23): person.getOverallSum()&#xa;.       DivisionByZero.java (65): return _overallSum;&#xa;.P   DivisionByZero.java (23): float progressionCoef = person.getOverallSum() / discountedSum;" dumpId="35" />
    <HtmlDump value=".    UseBeforeInitialization.java (20): ObjectInputStream source = null;&#xa;ECP   UseBeforeInitialization.java (22): new ObjectInputStream(new FileInputStream(&quot;...&quot;)) // ObjectInputStream.ObjectInputStream() throws: IOException // Allocated resource variable: new FileInputStream(&quot;...&quot;)" dumpId="36" />
    <HtmlDump value=".C   NullPointer.java (10): String sFirstLine = null; // Null value carrier: sFirstLine&#xa;.    NullPointer.java (11): BufferedReader reader = null; // Null value carrier: sFirstLine&#xa;!E   NullPointer.java (13): new FileReader(sFileName) // FileReader.FileReader() throws: FileNotFoundException // Null value carrier: sFirstLine&#xa;.    NullPointer.java (15): catch (Exception e) // Null value carrier: sFirstLine&#xa;.    NullPointer.java (16): System.out.println(&quot;Exception occured. &quot; + e.toString()); // Null value carrier: sFirstLine&#xa;.    NullPointer.java (18): close(reader); // Null value carrier: sFirstLine&#xa;.P   NullPointer.java (20): sFirstLine.length() // Null value carrier: sFirstLine" dumpId="37" />
    <HtmlDump value=".    NullPointer.java (10): String sFirstLine = null;&#xa;.C   NullPointer.java (11): BufferedReader reader = null; // Null value carrier: reader&#xa;!E   NullPointer.java (13): new FileReader(sFileName) // FileReader.FileReader() throws: FileNotFoundException // Null value carrier: reader&#xa;.    NullPointer.java (15): catch (Exception e) // Null value carrier: reader&#xa;.    NullPointer.java (16): System.out.println(&quot;Exception occured. &quot; + e.toString()); // Null value carrier: reader&#xa;!    NullPointer.java (18): close(reader); // Null value carrier: reader&#xa;.P      NullPointer.java (26): reader.close(); // Null value carrier: reader" dumpId="38" />
    <HtmlDump value=".C   MyDictionary.java (16): String strKey = null; // Null value carrier: strKey&#xa;.    MyDictionary.java (17): if (key instanceof String) { // Null value carrier: strKey&#xa;.P   MyDictionary.java (20): dict.put(strKey, value); // Null value carrier: strKey" dumpId="39" />
    <HtmlDump value=".C   ConstructorExample.java (12): RandomAccessFile file = new RandomAccessFile (path, &quot;rw&quot;); // Allocated resource variable: new RandomAccessFile (path, &quot;rw&quot;)&#xa;!E   ConstructorExample.java (13): file.length () // RandomAccessFile.length() throws: IOException // Allocated resource variable: file&#xa;.P   ConstructorExample.java (14): } // Allocated resource variable: file" dumpId="40" />
  </FADetails>

      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="47" total="0">
               <Category authTot="0;" authUrg="0;" desc="API" name="BD.API" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD.TRS" rules="5" total="0" />
               <Category authTot="16;" authUrg="16;" desc="Resources" name="BD.RES" rules="2" total="16" />
               <Category authTot="4;" authUrg="4;" desc="Collections" name="BD.CO" rules="1" total="4" />
               <Category authTot="11;" authUrg="11;" desc="Exceptions" name="BD.EXCEPT" rules="1" total="11" />
               <Category authTot="0;" authUrg="0;" desc="Optimization" name="BD.OPT" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Security" name="BD.SECURITY" rules="18" total="0" />
               <Category authTot="9;" authUrg="9;" desc="Possible Bugs" name="BD.PB" rules="15" total="9" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="JavaBeans" name="BEAN" rules="5" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Code Duplication Detection" name="CDD" rules="6" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Coding Conventions" name="CODSTA" rules="107" total="0">
               <Category authTot="0;" authUrg="0;" desc="Readability" name="CODSTA.READ" rules="39" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Bad Practice" name="CODSTA.BP" rules="24" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Overriding and Implementing Methods" name="CODSTA.OIM" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Poor Object Oriented Design" name="CODSTA.POD" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Organization" name="CODSTA.ORG" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Error-Prone Coding" name="CODSTA.EPC" rules="14" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Design by Contract" name="DBC" rules="18" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Eclipse Development" name="ECLIPSE" rules="3" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Enterprise JavaBeans" name="EJB" rules="61" total="0">
               <Category authTot="0;" authUrg="0;" desc="Enterprise JavaBeans 3" name="EJB.EJB3" rules="18" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="19" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Formatting" name="FORMAT" rules="36" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Garbage Collection" name="GC" rules="12" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Global Static Analysis" name="GLOBAL" rules="22" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Hibernate Framework" name="HIBERNATE" rules="13" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Initialization" name="INIT" rules="14" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Internationalization" name="INTER" rules="17" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Javadoc Comments" name="JAVADOC" rules="25" total="0" />
            <Category authTot="2;" authUrg="2;" desc="Java Database Connectivity" name="JDBC" rules="10" total="2" />
            <Category authTot="0;" authUrg="0;" desc="JUnit Test Case" name="JUNIT" rules="27" total="0" />
            <Category authTot="1;" authUrg="1;" desc="Metric" name="METRIC" rules="48" total="1" />
            <Category authTot="0;" authUrg="0;" desc="Metrics - deprecated" name="METRICS" rules="23" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Embedded Devices" name="MOBILE" rules="17" total="0">
               <Category authTot="0;" authUrg="0;" desc="Google Android" name="MOBILE.ANDROID" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Java 2 Micro Edition" name="MOBILE.J2ME" rules="7" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Naming Conventions" name="NAMING" rules="38" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Object Oriented Programming" name="OOP" rules="35" total="0" />
            <Category authTot="8;" authUrg="1;" desc="Optimization" name="OPT" rules="56" total="8" />
            <Category authTot="0;" authUrg="0;" desc="Possible Bugs" name="PB" rules="139" total="0">
               <Category authTot="0;" authUrg="0;" desc="Numerical Errors" name="PB.NUM" rules="16" total="0" />
               <Category authTot="2;" authUrg="1;" desc="Confusing or Unintended Behavior" name="PB.CUB" rules="32" total="2" />
               <Category authTot="1;" authUrg="0;" desc="Typographical Errors" name="PB.TYPO" rules="12" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Runtime Exceptions" name="PB.RE" rules="17" total="0" />
               <Category authTot="3;" authUrg="0;" desc="Logical Errors" name="PB.LOGIC" rules="18" total="3" />
               <Category authTot="0;" authUrg="0;" desc="API Usage and Implementation" name="PB.API" rules="25" total="0" />
               <Category authTot="4;" authUrg="1;" desc="Useless Code" name="PB.USC" rules="12" total="4" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Portability" name="PORT" rules="9" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Property Files" name="PROPS" rules="17" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Security" name="SECURITY" rules="146" total="0">
               <Category authTot="0;" authUrg="0;" desc="Unsafe Environment Configuration" name="SECURITY.UEC" rules="35" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Deadlocks and Race Conditions" name="SECURITY.DRC" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Backdoor Vulnerabilities" name="SECURITY.BV" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Unsafe Error Handling and Logging" name="SECURITY.UEHL" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Weak Security Controls" name="SECURITY.WSC" rules="61" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Input-Based Attacks" name="SECURITY.IBA" rules="9" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Exposing Sensitive Data" name="SECURITY.ESD" rules="14" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Erratic Application Behavior" name="SECURITY.EAB" rules="14" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Serialization" name="SERIAL" rules="17" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Servlets" name="SERVLET" rules="17" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Spring Framework" name="SPRING" rules="11" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Struts Framework" name="STRUTS" rules="30" total="0">
               <Category authTot="0;" authUrg="0;" desc="Struts 2" name="STRUTS.STRUTS2" rules="4" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="TRS" rules="49" total="0" />
            <Category authTot="0;" authUrg="0;" desc="User-defined Flow Analysis" name="UBD" rules="0" total="0" />
            <Category authTot="13;" authUrg="4;" desc="Unused Code" name="UC" rules="27" total="13" />
            <Category authTot="0;" authUrg="0;" desc="XML Development" name="XML" rules="2" total="0" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.API" desc="Make sure implementation of Object.equals(Object) properly handles null values" id="BD.API.EQNULL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.API" desc="Make sure implementation of Object.equals(Object) is reflexive" id="BD.API.EQREFL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="4;" authUrg="4;" cat="BD.CO" desc="Do not modify collection while iterating over it" id="BD.CO.ITMOD" sev="1" total="4" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="11;" authUrg="11;" cat="BD.EXCEPT" desc="Avoid NullPointerException" id="BD.EXCEPT.NP" sev="1" total="11" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.PB" desc="Avoid unvalidated input in array indexes" id="BD.PB.ARRAYINP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="1;" authUrg="1;" cat="BD.PB" desc="Avoid use before explicit initialization" id="BD.PB.NOTEXPLINIT" sev="1" total="1" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="1;" authUrg="1;" cat="BD.PB" desc="Avoid use of fields before initialization in constructors and static initializers" id="BD.PB.NOTINITCTOR" sev="1" total="1" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.PB" desc="Avoid overwriting method parameters before each use" id="BD.PB.POVR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="1;" authUrg="1;" cat="BD.PB" desc="Avoid division by zero" id="BD.PB.ZERO" sev="1" total="1" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.PB" desc="Avoid accessing arrays out of bounds" id="BD.PB.ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.PB" desc="Avoid incorrect shift operations" id="BD.PB.BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="6;" authUrg="6;" cat="BD.PB" desc="Avoid conditions that always evaluate to the same value" id="BD.PB.CC" sev="2" total="6" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.RES" desc="Do not use resources that have been freed" id="BD.RES.FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="16;" authUrg="16;" cat="BD.RES" desc="Ensure resources are deallocated" id="BD.RES.LEAKS" sev="1" total="16" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.TRS" desc="Avoid double locking" id="BD.TRS.DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.TRS" desc="Do not abandon unreleased locks" id="BD.TRS.LOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.TRS" desc="Do not acquire locks in different order" id="BD.TRS.ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="0;" authUrg="0;" cat="BD.TRS" desc="Do not use blocking methods while holding a lock" id="BD.TRS.TSHL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="BEAN" desc="Use appropriate signatures for listener method names in JavaBean classes" id="BEAN.BLNC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="BEAN" desc="Ensure that JavaBean classes implement 'java.io.Serializable'" id="BEAN.SERIALIZABLE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid method duplication" id="CDD.DUPM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid class duplication" id="CDD.DUPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="CODSTA.EPC" desc="Call 'super.clone()' in all 'clone()' methods" id="CODSTA.EPC.SCLONE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="CODSTA.EPC" desc="Do not use constructors in the 'clone()' method" id="CODSTA.EPC.CLNC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="CODSTA.EPC" desc="Do not call an &quot;abstract&quot; method from a constructor in an &quot;abstract&quot; class" id="CODSTA.EPC.NCAC" sev="4" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="CODSTA.OIM" desc="Use the 'clone()' method only to implement 'Cloneable' interface" id="CODSTA.OIM.CLONE2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="CODSTA.OIM" desc="Ensure 'clone()' method of non-final Cloneable class declared to throw 'CloneNotSupportedException'" id="CODSTA.OIM.CLONET" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="CODSTA.ORG" desc="Ensure all types have a non default package name" id="CODSTA.ORG.UNDPN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="CODSTA.READ" desc="Avoid nested assignments or assignments embedded in other expressions" id="CODSTA.READ.NEA" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="CODSTA.READ" desc="Do not declare multiple variables of different types in one statement" id="CODSTA.READ.VDT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Declare bean classes &quot;public&quot;" id="EJB.CDP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Do not declare bean classes as &quot;abstract&quot;" id="EJB.CNDA" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Do not declare bean classes as &quot;final&quot;" id="EJB.CNDF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Declare 'ejbCreate()' methods  &quot;public&quot;, but neither &quot;static&quot; nor &quot;final&quot;" id="EJB.CRTE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Implement a no-argument 'ejbCreate()' method for all Message-driven bean classes" id="EJB.MDBC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Do not define 'finalize()' method in bean classes" id="EJB.MNDF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Declare a &quot;public&quot; constructor that takes no parameters in bean classes" id="EJB.NFDC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Declare 'ejbPostCreate()' &quot;public&quot; and neither &quot;static&quot; nor &quot;final&quot;" id="EJB.PCRTE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Make the return type &quot;void&quot; for SessionBeans or MessageDrivenBeans' 'ejbCreate()' methods" id="EJB.RTC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Make the return type &quot;void&quot; for the 'ejbPostCreate()' method" id="EJB.RTP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Avoid passing the &quot;this&quot; reference as an argument" id="EJB.THISARG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Do not return &quot;this&quot;" id="EJB.THISRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Do not access or modify security configuration objects" id="EJB.AMSC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Declare all &quot;static&quot; fields in EJB bean classes &quot;final&quot;" id="EJB.NFS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Make finder methods' return type the primary key or a collection of primary keys" id="EJB.RT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="EJB" desc="Do not set or create a new SecurityManager in EJBs" id="EJB.SMSN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="EJB" desc="Avoid starting, stopping, or managing threads in any way in bean classes" id="EJB.THREAD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EJB" desc="Do not throw 'java.rmi.RemoteException' in a bean's local interface and local home interface" id="EJB.RILH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="EJB.EJB3" desc="Call 'InvocationContext.proceed()' from @AroundInvoke methods" id="EJB.EJB3.CPIM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="EJB.EJB3" desc="Ensure instance variables of @Stateful beans are Serializable" id="EJB.EJB3.SIVS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw exceptions from the constructors of exception classes" id="EXCEPT.TEFEC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not abuse exceptions as flow control statements" id="EXCEPT.AEFC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not use instanceof in a catch block to check the exception type" id="EXCEPT.AIOC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Always chain thrown exceptions" id="EXCEPT.CTE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw exception types which are too general or are unchecked exceptions" id="EXCEPT.NTERR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="GC" desc="Do not use 'finalize()' methods to unregister listeners" id="GC.FM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="GC" desc="Do not call 'finalize()' explicitly" id="GC.NCF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="GC" desc="Prevent potential memory leaks in ObjectOutputStreams by calling 'reset()'" id="GC.OSTM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="GC" desc="Call 'super.finalize()' from 'finalize()'" id="GC.FCF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="GC" desc="Call 'super.finalize()' in the &quot;finally&quot; block of 'finalize()' methods" id="GC.IFF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="0;" authUrg="0;" cat="HIBERNATE" desc="Avoid storing unencrypted Hibernate usernames and passwords in 'web.xml' files" id="HIBERNATE.UPWD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid uninitialized reads of fields before or during constructor execution" id="INIT.UIRC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use a &quot;static&quot; initializer that creates an instance of the current class before all &quot;static final&quot; fields are assigned" id="INIT.SICUI" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid explicitly initializing fields which have already been initialized by a superclass' constructor" id="INIT.ADI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use initialization circularities for fields" id="INIT.IC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use non-final &quot;static&quot; fields during the initialization" id="INIT.NFS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="1;" authUrg="1;" cat="JDBC" desc="Ensure index is valid in JDBC method invocation" id="JDBC.BRSA" sev="1" total="1" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="1;" authUrg="1;" cat="JDBC" desc="Close JDBC connections in &quot;finally&quot; blocks" id="JDBC.CDBC" sev="1" total="1" />
            <Rule analyzer="com.parasoft.jtest.standards.metrics.analyzer" authTot="0;" authUrg="0;" cat="METRIC" desc="McCabe Cyclomatic Complexity" id="METRIC.CC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.metrics.analyzer" authTot="1;" authUrg="1;" cat="METRIC" desc="Nested Blocks Depth" id="METRIC.NBD" sev="3" total="1" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not declare types with the same name as types in the Java platform" id="NAMING.DJLO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="NAMING" desc="Avoid using potential Java keywords as identifiers" id="NAMING.ID" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use a package name that is reserved by Sun" id="NAMING.RPKG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="NAMING" desc="Avoid using dollar signs in names" id="NAMING.DSN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use variable names which differ only in case" id="NAMING.UUVN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="OOP" desc="Do not hide inherited fields" id="OOP.AHF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="OOP" desc="Do not hide inherited &quot;static&quot; member methods" id="OOP.AHSM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="4;" authUrg="1;" cat="OPT" desc="Close input and output resources in &quot;finally&quot; blocks" id="OPT.CIO" sev="3" total="4" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="OPT" desc="Do not use a &quot;private&quot; field that is accessed in only one method; change it to a local variable" id="OPT.CTLV" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="OPT" desc="Declare &quot;final&quot; fields with a known compile time value as &quot;static&quot;" id="OPT.NSF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="4;" authUrg="0;" cat="OPT" desc="Declare member classes &quot;static&quot; if possible" id="OPT.SI" sev="3" total="4" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unnecessary casting" id="OPT.UNC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB" desc="Ensure that exactly one type has the same name as the file name" id="PB.OCSF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB" desc="Place &quot;default&quot; as the last case of the &quot;switch&quot; statement" id="PB.PDCL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB" desc="Provide &quot;default:&quot; for each &quot;switch&quot; statement" id="PB.PDS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.API" desc="Do not call the 'next' method from the 'hasNext' method of an Iterator" id="PB.API.HNCN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.API" desc="Do not use &quot;URL&quot; objects in &quot;Collections&quot; or &quot;Maps&quot;" id="PB.API.IUMS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.API" desc="Do not call 'setSize()' in 'ComponentListener.componentResized()'" id="PB.API.DNCSS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.API" desc="Do not create an empty JarFile entry or an empty ZipFile entry" id="PB.API.EJF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.API" desc="Avoid calling 'equals(null)'" id="PB.API.EQNL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.API" desc="Ensure that all types which are used as keys in Sets and Maps override the 'equals()' and 'hashCode()' methods" id="PB.API.KOEH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.API" desc="Do not overload the 'finalize()' method" id="PB.API.OF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.API" desc="Avoid using &quot;.&quot; as a regular expression in 'String.replaceAll()' and 'String.replaceFirst()'" id="PB.API.REP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.API" desc="Do not pass a 'char' to the 'StringBuffer(int)' constructor" id="PB.API.SBCC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.API" desc="Avoid improper casting of the results of the 'next' methods in the 'java.util.Random' class" id="PB.API.UNI" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.API" desc="Avoid using the 'equals()' and 'hashCode()' methods of &quot;java.net.URL&quot;" id="PB.API.URL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.API" desc="Update values which may be using to compare with vendor properties" id="PB.API.VENDOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Avoid using 'return's inside 'finally blocks if thare are other 'return's inside the try-catch block" id="PB.CUB.ARCF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Do not exit &quot;finally&quot; blocks abruptly" id="PB.CUB.ATSF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Do not use the &quot;+&quot; string concatenation operator to concatenate numbers; use it only to add numbers" id="PB.CUB.DCP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Avoid erroneously placing statements outside blocks" id="PB.CUB.EBI" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Avoid overloading varargs methods" id="PB.CUB.OVAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Do not use &quot;char&quot; arrays in &quot;String&quot; concatenations" id="PB.CUB.SAC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="2;" authUrg="1;" cat="PB.CUB" desc="Do not use '==' or '!=' to compare objects" id="PB.CUB.UEIC" sev="2" total="2" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Avoid dangling &quot;else&quot; statements" id="PB.CUB.ADE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Avoid confusing assignments to constructor arguments" id="PB.CUB.AWP" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Avoid improper concatenation of characters with numbers" id="PB.CUB.CNVC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.CUB" desc="Use the method name 'main()' only for the entry point method" id="PB.CUB.MAIN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.LOGIC" desc="Do not call 'equals()' methods that always return false" id="PB.LOGIC.EQUS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.LOGIC" desc="Avoid calling 'equals()' with same object" id="PB.LOGIC.ESO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.LOGIC" desc="Avoid infinite recursive method calls" id="PB.LOGIC.FLRC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.LOGIC" desc="Do not increment or decrement on the same variable over multiple nested &quot;for&quot; loop statements" id="PB.LOGIC.JI" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="3;" authUrg="0;" cat="PB.LOGIC" desc="Ensure that the objects used within a loop's condition are properly accessed within the loop's body" id="PB.LOGIC.OAMC" sev="2" total="3" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.LOGIC" desc="Avoid bugs in the usage of loop variables" id="PB.LOGIC.INDEX" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.LOGIC" desc="Avoid out of range comparisons" id="PB.LOGIC.OOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Avoid calculations which result in overflow or NaN" id="PB.NUM.ICO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Do not assign the result of an integer division to a floating point variable" id="PB.NUM.IDCD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Avoid comparisons to Double.NaN or Float.NaN" id="PB.NUM.NAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Do not initialize array dimensions with negative numbers" id="PB.NUM.NIA" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Do not pass floating point values to the 'BigDecimal' constructor" id="PB.NUM.BBDCC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="PB.NUM.BSA" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Do not cast primitive data types to lower precision" id="PB.NUM.CLP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Do not compare floating point types" id="PB.NUM.DCF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Do not use floating point variables as loop indices" id="PB.NUM.FPLI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.NUM" desc="Avoid casting the result of an integer multiplication to &quot;long&quot;" id="PB.NUM.IMOF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.RE" desc="Do not add a collection to itself" id="PB.RE.ACTI" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.RE" desc="Check whether or not &quot;readLine()&quot; returned null before dereferencing the return value" id="PB.RE.IDRL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.RE" desc="Avoid using methods add() from JLayer class" id="PB.RE.JLAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.RE" desc="When used HttpURLConnection always check return value from the getResponseCode() methods before call getInputStream()" id="PB.RE.RCODE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.RE" desc="Avoid modifying fixed-size Collections" id="PB.RE.AMFSL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.RE" desc="Avoid possible ArrayStoreExceptions" id="PB.RE.ASE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.RE" desc="Ensure 'Iterator.next()' method implementations throw 'NoSuchElementException'" id="PB.RE.CTNSE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.TYPO" desc="Avoid assignment within a condition" id="PB.TYPO.ASI" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.TYPO" desc="Ensure that arguments passed to Java wrapper classes do not contain typos" id="PB.TYPO.WT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="1;" authUrg="0;" cat="PB.TYPO" desc="Ensure &quot;switch&quot; statements do not contain typos" id="PB.TYPO.TLS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.TYPO" desc="Avoid assigning same variable in the fall-through switch case" id="PB.TYPO.DAV" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.TYPO" desc="Do not give methods and fields the same name as the enclosing class or each other" id="PB.TYPO.NAMING" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="1;" authUrg="0;" cat="PB.USC" desc="Avoid conditional expressions that always evaluate to a constant value" id="PB.USC.CC" sev="1" total="1" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="2;" authUrg="0;" cat="PB.USC" desc="Avoid unreachable &quot;else if&quot; and &quot;else&quot; cases" id="PB.USC.UIF" sev="1" total="2" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="1;" authUrg="1;" cat="PB.USC" desc="Avoid using &quot;private&quot; fields which are never given a meaningful value" id="PB.USC.FCBS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.USC" desc="Avoid increment and decrement statements which have no effect" id="PB.USC.OI" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.USC" desc="Do not use the unary operator '+'" id="PB.USC.UNARY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="PB.USC" desc="Avoid empty statements" id="PB.USC.AES" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="PB.USC" desc="Avoid self assignments/initializations to fields and/or local variables" id="PB.USC.SAFL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Avoid duplicated property names" id="PROPS.DUPN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Avoid empty property names" id="PROPS.EMN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Avoid misusing arguments in property values" id="PROPS.IARG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Avoid incomplete property entries" id="PROPS.ICK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Avoid unmatched property entries in resources with different locales" id="PROPS.MENTRY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Avoid duplicated property values" id="PROPS.DUPV" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Avoid empty property values" id="PROPS.EMV" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Follow the limit for number of property entries" id="PROPS.FM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Avoid misusing the line continuation character '\'" id="PROPS.IVCC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="0;" authUrg="0;" cat="PROPS" desc="Ensure that property entries are localized correctly" id="PROPS.TENTRY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="SERIAL" desc="Avoid classes that implement 'Externalizable' but do not define a no-argument constructor" id="SERIAL.ENNAC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="SERIAL" desc="Ensure the return type of 'readResolve()' and 'writeReplace()' methods are 'java.lang.Object'" id="SERIAL.MRWD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="SERIAL" desc="Ensure outer class is serializable if its inner class is serializable" id="SERIAL.OC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="SERIAL" desc="Ensure that the 'readObject()' and 'writeObject()' methods have the correct signature" id="SERIAL.ROWO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="SERIAL" desc="Avoid serializable classes that extend a superclass without a zero-argument constructor" id="SERIAL.SNNAC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="SERIAL" desc="Ensure Serializable classes are correct" id="SERIAL.NSFSC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="SERIAL" desc="Declare 'serialPersistentFields' &quot;private static final&quot;" id="SERIAL.SPF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="SERIAL" desc="Ensure that all fields are assigned by the 'readObject()' method and written by the 'writeObject()' method" id="SERIAL.RWAF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="0;" authUrg="0;" cat="SERVLET" desc="Ensure that all servlets have a corresponding mapping in 'web.xml' files" id="SERVLET.SCM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="SPRING" desc="Follow configuration class conventions" id="SPRING.ATCFG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="STRUTS" desc="Avoid accessing a database from Action Classes" id="STRUTS.ACDA" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="0;" authUrg="0;" cat="STRUTS" desc="Avoid defining multiple form beans with the same name in 'struts-config.xml' files" id="STRUTS.MFBSN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="0;" authUrg="0;" cat="STRUTS" desc="Use the 'minlength' validator for password fields in 'validation.xml'" id="STRUTS.MLVP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="0;" authUrg="0;" cat="STRUTS" desc="Ensure that the @path attribute of '&lt;action>' and '&lt;forward>' elements begins with '/' in 'struts-config.xml' files" id="STRUTS.PFS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="0;" authUrg="0;" cat="STRUTS" desc="Ensure that the 'scope' attribute is set to either &quot;request&quot; or &quot;session&quot; for actions and exceptions in 'struts-config.xml' files" id="STRUTS.RSS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Do not cause deadlocks by calling a &quot;synchronized&quot; method from a &quot;synchronized&quot; method" id="TRS.CSFS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Release Locks in a &quot;finally&quot; block" id="TRS.RLF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Do not synchronize on constant Strings" id="TRS.SCS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Manually synchronize on 'synchronized' collections when iterating over them" id="TRS.SSCI" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Call 'wait()' and 'await()' only inside a loop that tests the liveness condition" id="TRS.UWIL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="TRS" desc="Do not use variables of the unsafe type 'java.lang.ThreadGroup'" id="TRS.AUTG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Do not call the &quot;start&quot; method of threads from inside a constructor" id="TRS.CSTART" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Do not synchronize on &quot;public&quot; fields since doing so may cause deadlocks" id="TRS.SOPF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="TRS" desc="Avoid calling unsafe deprecated methods of 'Thread' and 'Runtime'" id="TRS.THRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="TRS" desc="Do not call 'Thread.sleep()' while holding a lock since doing so can cause poor performance and deadlocks" id="TRS.TSHL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="TRS" desc="Ensure 'wait()', 'notify()' and 'notifyAll()' are invoked on an object that is clearly synchronized in its enclosing method scope" id="TRS.NSYN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="TRS" desc="Do not synchronize on non-&quot;final&quot; fields since doing so makes it difficult to guarantee mutual exclusion" id="TRS.SOUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Synchronize access to &quot;static&quot; SimpleDataFormats" id="TRS.SSDF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="TRS" desc="Do not start a thread without specifying a 'run()' method" id="TRS.UT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="TRS" desc="Use 'wait()' and 'notifyAll()' instead of polling loops" id="TRS.UWNA" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="1;" authUrg="0;" cat="UC" desc="Avoid collection objects that are never read" id="UC.AURCO" sev="1" total="1" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="UC" desc="Avoid empty static and non-static initializers" id="UC.AESTAT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="1;" authUrg="0;" cat="UC" desc="Avoid unused labels" id="UC.AUL" sev="3" total="1" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="11;" authUrg="4;" cat="UC" desc="Avoid local variables that are never read" id="UC.AURV" sev="3" total="11" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="UC" desc="Avoid duplicate code in 'if' branches" id="UC.DIEB" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="UC" desc="Do not explicitly &quot;import&quot; the java.lang.* &quot;package&quot;" id="UC.DIL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="UC" desc="Avoid empty 'finalize()' methods" id="UC.EF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="0;" authUrg="0;" cat="UC" desc="Avoid empty &quot;synchronized&quot; statements" id="UC.SNE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="UC" desc="Avoid unnecessary 'if' statements" id="UC.UCIF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="UC" desc="Avoid redundant throw clauses" id="UC.ARTD" sev="4" total="0" />
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="0;" authUrg="0;" cat="UC" desc="Do not import classes from the package that contains the current class" id="UC.PIMPORT" sev="4" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="40;" authUrg="36;" id="1" total="40" />
            <Severity authTot="13;" authUrg="8;" id="2" total="13" />
            <Severity authTot="21;" authUrg="6;" id="3" total="21" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <StdViol sev="3" ln="35" hash="1319322499" urgent="true" tool="jtest" locEndLn="35" locType="sr" lnHash="1530337033" pkg="examples.servlets" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'pr' is never used" lang="java" lineHash="1530337033" locRef="1" goals="1," locStartln="35" locStartPos="19" locFile="/demo/src/examples/servlets/ExampleServlet.java" rule="UC.AURV" locEndPos="21" auth="mar" />
    <StdViol sev="3" ln="37" hash="1319322499" urgent="true" tool="jtest" locEndLn="37" locType="sr" lnHash="1012570095" pkg="examples.servlets" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'pr' is never used" lang="java" lineHash="1012570095" locRef="1" goals="1," locStartln="37" locStartPos="19" locFile="/demo/src/examples/servlets/ExampleServlet.java" rule="UC.AURV" locEndPos="21" auth="mar" />
    <StdViol sev="2" ln="58" hash="-1699179821" urgent="true" tool="jtest" locEndLn="58" locType="sr" lnHash="-628236893" pkg="examples.security" analyzer="com.parasoft.jtest.standards.checkers.java" msg="The field '_connection' is used but is never assigned a non-&quot;null&quot; value" lang="java" risk="Undefined" lineHash="-628236893" locRef="2" goals="1," locStartln="58" locStartPos="23" locFile="/demo/src/examples/security/InputValidation.java" rule="PB.USC.FCBS" locEndPos="34" prio="Not Defined" auth="mar" />
    <StdViol sev="3" ln="63" hash="-1699179821" urgent="true" tool="jtest" locEndLn="63" locType="sr" lnHash="2012167559" pkg="examples.security" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'output' is not closed within a &quot;finally&quot; block" lang="java" risk="Undefined" lineHash="2012167559" locRef="2" goals="1," locStartln="63" locStartPos="20" locFile="/demo/src/examples/security/InputValidation.java" rule="OPT.CIO" locEndPos="26" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/security/InputValidation.java" ln="110" tool="jtest" lnHash="30537853" lang="java" lineHash="30537853" locRef="2" risk="Undefined" id="-1166901580" locStartln="110" locStartPos="4" rule="BD.RES.LEAKS" locEndPos="5" causeLocRef="2" FirstElSrcRngEndLn="96" hash="-1699179821" FirstElSrcRngStartln="96" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="110" locType="sr" pkg="examples.security" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="JDBC statement not closed: stmt" goals="1," locFile="/demo/src/examples/security/InputValidation.java" dumpId="1" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="48">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="2" lineHash="-271783734" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="87" ln="87" srcRngEndPos="30" srcRngStartln="87" srcRngStartPos="8" desc="Statement stmt = null;" ElType="." rngLn="87">
          <Props />
        </ElDesc>
        <ElDesc locRef="2" lineHash="920994605" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="88" ln="88" srcRngEndPos="28" srcRngStartln="88" srcRngStartPos="8" desc="ResultSet rs = null;" ElType="." rngLn="88">
          <Props />
        </ElDesc>
        <ElDesc locRef="2" lineHash="-1647642130" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="95" ln="94" srcRngEndPos="58" srcRngStartln="94" srcRngStartPos="12" desc="String query = &quot;SELECT * FROM users WHERE username='&quot; + username" ElType="." rngLn="94">
          <Props />
        </ElDesc>
        <ElDesc locRef="2" lineHash="-1686616749" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="96" ln="96" srcRngEndPos="48" srcRngStartln="96" srcRngStartPos="12" desc="stmt = _connection.createStatement()" ElType=".C" rngLn="96">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="849041673" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="97" ln="97" srcRngEndPos="41" srcRngStartln="97" srcRngStartPos="12" desc="rs = stmt.executeQuery(query)" ElType="." rngLn="97">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="-846123640" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="99" ln="99" srcRngEndPos="28" srcRngStartln="99" srcRngStartPos="12" desc="if (rs.next()) {" ElType="." rngLn="99">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="-725677699" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="101" ln="101" srcRngEndPos="28" srcRngStartln="101" srcRngStartPos="16" desc="return true;" ElType="." rngLn="101">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="30537853" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="110" ln="110" srcRngEndPos="5" srcRngStartln="110" srcRngStartPos="4" desc="}" ElType=".P" rngLn="110">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/security/InputValidation.java" ln="110" tool="jtest" lnHash="30537853" lang="java" lineHash="30537853" locRef="2" risk="Undefined" id="-495394104" locStartln="110" locStartPos="4" rule="BD.RES.LEAKS" locEndPos="5" causeLocRef="2" FirstElSrcRngEndLn="97" hash="-1699179821" FirstElSrcRngStartln="97" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="110" locType="sr" pkg="examples.security" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="JDBC resultset not closed: rs" goals="1," locFile="/demo/src/examples/security/InputValidation.java" dumpId="2" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="41">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="2" lineHash="-271783734" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="87" ln="87" srcRngEndPos="30" srcRngStartln="87" srcRngStartPos="8" desc="Statement stmt = null;" ElType="." rngLn="87">
          <Props />
        </ElDesc>
        <ElDesc locRef="2" lineHash="920994605" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="88" ln="88" srcRngEndPos="28" srcRngStartln="88" srcRngStartPos="8" desc="ResultSet rs = null;" ElType="." rngLn="88">
          <Props />
        </ElDesc>
        <ElDesc locRef="2" lineHash="-1647642130" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="95" ln="94" srcRngEndPos="58" srcRngStartln="94" srcRngStartPos="12" desc="String query = &quot;SELECT * FROM users WHERE username='&quot; + username" ElType="." rngLn="94">
          <Props />
        </ElDesc>
        <ElDesc locRef="2" lineHash="-1686616749" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="96" ln="96" srcRngEndPos="48" srcRngStartln="96" srcRngStartPos="12" desc="stmt = _connection.createStatement()" ElType="." rngLn="96">
          <Props />
        </ElDesc>
        <ElDesc locRef="2" lineHash="849041673" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="97" ln="97" srcRngEndPos="41" srcRngStartln="97" srcRngStartPos="12" desc="rs = stmt.executeQuery(query)" ElType=".C" rngLn="97">
          <Props>
            <Prop key="Tracked variables" val="rs" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="-846123640" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="99" ln="99" srcRngEndPos="28" srcRngStartln="99" srcRngStartPos="12" desc="if (rs.next()) {" ElType="." rngLn="99">
          <Props>
            <Prop key="Tracked variables" val="rs" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="-725677699" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="101" ln="101" srcRngEndPos="28" srcRngStartln="101" srcRngStartPos="16" desc="return true;" ElType="." rngLn="101">
          <Props>
            <Prop key="Tracked variables" val="rs" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="30537853" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="110" ln="110" srcRngEndPos="5" srcRngStartln="110" srcRngStartPos="4" desc="}" ElType=".P" rngLn="110">
          <Props>
            <Prop key="Tracked variables" val="rs" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/security/InputValidation.java" ln="133" tool="jtest" lnHash="-813710626" lang="java" lineHash="-813710626" locRef="2" risk="Undefined" id="617453213" locStartln="133" locStartPos="8" rule="BD.RES.LEAKS" locEndPos="9" causeLocRef="2" FirstElSrcRngEndLn="129" hash="-1699179821" FirstElSrcRngStartln="129" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="133" locType="sr" pkg="examples.security" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="JDBC statement not closed: stmt" goals="1," locFile="/demo/src/examples/security/InputValidation.java" dumpId="3" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="59">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="2" lineHash="-2050969790" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="129" ln="129" srcRngEndPos="59" srcRngStartln="129" srcRngStartPos="12" desc="Statement stmt = _connection.createStatement();" ElType=".C" rngLn="129">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="-1640655223" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="131" ln="130" srcRngEndPos="47" srcRngStartln="130" srcRngStartPos="12" desc="String query = &quot;INSERT INTO invalid_logins VALUES ('&quot; + username" ElType="." rngLn="130">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="512503585" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="132" ln="132" srcRngEndPos="32" srcRngStartln="132" srcRngStartPos="12" desc="stmt.execute(query);" ElType="." rngLn="132">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
        <ElDesc locRef="2" lineHash="-813710626" srcRnghash="-1699179821" locType="sr" srcRngFile="/demo/src/examples/security/InputValidation.java" srcRngEndLn="133" ln="133" srcRngEndPos="9" srcRngStartln="133" srcRngStartPos="8" desc="}" ElType=".P" rngLn="133">
          <Props>
            <Prop key="Tracked variables" val="stmt" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="2" ln="52" hash="176097414" tool="jtest" locEndLn="52" locType="sr" lnHash="-1001377924" pkg="examples.queue" analyzer="com.parasoft.jtest.standards.checkers.java" msg="&quot;!=&quot; is used when comparing Objects. 'equals()' should be used instead" lang="java" lineHash="-1001377924" locRef="3" goals="0," locStartln="52" locStartPos="16" locFile="/demo/src/examples/queue/Queue.java" rule="PB.CUB.UEIC" locEndPos="30" auth="mar" />
    <StdViol sev="3" ln="64" hash="176097414" tool="jtest" locEndLn="64" locType="sr" lnHash="378471007" pkg="examples.queue" analyzer="com.parasoft.jtest.standards.checkers.rulewizard" msg="Member class could be declared &quot;static&quot;: QueueItem" lang="java" lineHash="378471007" locRef="3" goals="0," locStartln="64" locStartPos="18" locFile="/demo/src/examples/queue/Queue.java" rule="OPT.SI" locEndPos="27" auth="mar" />
    <StdViol sev="1" ln="87" hash="-1099120371" urgent="true" tool="jtest" locEndLn="87" locType="sr" lnHash="1774293749" pkg="examples.nbank" analyzer="com.parasoft.jtest.standards.checkers.java" msg="JDBC connection 'connection' is not closed in a &quot;finally&quot; block" lang="java" risk="Undefined" lineHash="1774293749" locRef="4" goals="1," locStartln="87" locStartPos="12" locFile="/demo/src/examples/nbank/Customer.java" rule="JDBC.CDBC" locEndPos="22" prio="Not Defined" auth="mar" />
    <StdViol sev="1" ln="100" hash="-1099120371" urgent="true" tool="jtest" locEndLn="100" locType="sr" lnHash="612379775" pkg="examples.nbank" analyzer="com.parasoft.jtest.standards.checkers.java" msg="'0' is not a valid index value for this method call" lang="java" risk="Undefined" lineHash="612379775" locRef="4" goals="1," locStartln="100" locStartPos="40" locFile="/demo/src/examples/nbank/Customer.java" rule="JDBC.BRSA" locEndPos="41" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/nbank/Customer.java" ln="111" tool="jtest" lnHash="30537853" lang="java" lineHash="30537853" locRef="4" risk="Undefined" id="1877979169" locStartln="111" locStartPos="4" rule="BD.RES.LEAKS" locEndPos="5" causeLocRef="4" FirstElSrcRngEndLn="87" hash="-1099120371" FirstElSrcRngStartln="87" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="111" locType="sr" pkg="examples.nbank" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="JDBC Connection not closed: connection" goals="1," locFile="/demo/src/examples/nbank/Customer.java" dumpId="4" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="78">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="4" lineHash="-1809401071" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="81" ln="81" srcRngEndPos="37" srcRngStartln="81" srcRngStartPos="8" desc="Connection connection = null;" ElType="." rngLn="81">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-185589454" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="82" ln="82" srcRngEndPos="43" srcRngStartln="82" srcRngStartPos="8" desc="PreparedStatement statement = null;" ElType="." rngLn="82">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1589018789" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="83" ln="83" srcRngEndPos="35" srcRngStartln="83" srcRngStartPos="8" desc="ResultSet resultSet = null;" ElType="." rngLn="83">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-439487439" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="86" ln="86" srcRngEndPos="53" srcRngStartln="86" srcRngStartPos="12" desc="Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;);" ElType="." rngLn="86">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="1774293749" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="87" ln="87" srcRngEndPos="78" srcRngStartln="87" srcRngStartPos="12" desc="connection = DriverManager.getConnection(&quot;bank&quot;, &quot;bank&quot;, &quot;system&quot;)" ElType=".C" rngLn="87">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1624193955" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="97" ln="97" srcRngEndPos="94" srcRngStartln="97" srcRngStartPos="12" desc="statement = connection.prepareStatement(&quot;select * from accounts where id=&quot; + _ssn)" ElType="." rngLn="97">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1368283926" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="98" ln="98" srcRngEndPos="48" srcRngStartln="98" srcRngStartPos="12" desc="resultSet = statement.executeQuery()" ElType="." rngLn="98">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="612379775" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="100" ln="100" srcRngEndPos="42" srcRngStartln="100" srcRngStartPos="12" desc="_name = resultSet.getString(0)" ElType="." rngLn="100">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="-582428250" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="101" ln="101" srcRngEndPos="41" srcRngStartln="101" srcRngStartPos="12" desc="_ssn = resultSet.getString(2)" ElType="." rngLn="101">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="185421611" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="103" ln="103" srcRngEndPos="30" srcRngStartln="103" srcRngStartPos="12" desc="resultSet.close();" ElType="." rngLn="103">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="1733847041" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="104" ln="104" srcRngEndPos="30" srcRngStartln="104" srcRngStartPos="12" desc="statement.close();" ElType="." rngLn="104">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1525876355" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="110" ln="110" srcRngEndPos="20" srcRngStartln="110" srcRngStartPos="8" desc="return true;" ElType="." rngLn="110">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="30537853" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="111" ln="111" srcRngEndPos="5" srcRngStartln="111" srcRngStartPos="4" desc="}" ElType=".P" rngLn="111">
          <Props>
            <Prop key="Tracked variables" val="connection" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/nbank/Customer.java" ln="111" tool="jtest" lnHash="30537853" lang="java" lineHash="30537853" locRef="4" risk="Undefined" id="2091960666" locStartln="111" locStartPos="4" rule="BD.RES.LEAKS" locEndPos="5" causeLocRef="4" FirstElSrcRngEndLn="97" hash="-1099120371" FirstElSrcRngStartln="97" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="111" locType="sr" pkg="examples.nbank" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="JDBC statement not closed: statement" goals="1," locFile="/demo/src/examples/nbank/Customer.java" dumpId="5" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="94">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="4" lineHash="-1809401071" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="81" ln="81" srcRngEndPos="37" srcRngStartln="81" srcRngStartPos="8" desc="Connection connection = null;" ElType="." rngLn="81">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-185589454" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="82" ln="82" srcRngEndPos="43" srcRngStartln="82" srcRngStartPos="8" desc="PreparedStatement statement = null;" ElType="." rngLn="82">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1589018789" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="83" ln="83" srcRngEndPos="35" srcRngStartln="83" srcRngStartPos="8" desc="ResultSet resultSet = null;" ElType="." rngLn="83">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-439487439" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="86" ln="86" srcRngEndPos="53" srcRngStartln="86" srcRngStartPos="12" desc="Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;);" ElType="." rngLn="86">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="1774293749" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="87" ln="87" srcRngEndPos="78" srcRngStartln="87" srcRngStartPos="12" desc="connection = DriverManager.getConnection(&quot;bank&quot;, &quot;bank&quot;, &quot;system&quot;)" ElType="." rngLn="87">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1624193955" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="97" ln="97" srcRngEndPos="94" srcRngStartln="97" srcRngStartPos="12" desc="statement = connection.prepareStatement(&quot;select * from accounts where id=&quot; + _ssn)" ElType=".C" rngLn="97">
          <Props>
            <Prop key="Tracked variables" val="statement" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1368283926" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="98" ln="98" srcRngEndPos="48" srcRngStartln="98" srcRngStartPos="12" desc="resultSet = statement.executeQuery()" ElType="!E" rngLn="98" thrownTypes="SQLException" throwingMethod="PreparedStatement.executeQuery">
          <Props>
            <Prop key="Tracked variables" val="statement" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1741528140" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="105" ln="105" srcRngEndPos="41" srcRngStartln="105" srcRngStartPos="10" desc="catch (SQLException exception)" ElType="." rngLn="105">
          <Props>
            <Prop key="Tracked variables" val="statement" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="875386708" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="106" ln="106" srcRngEndPos="94" srcRngStartln="106" srcRngStartPos="12" desc="System.err.println(&quot;Error loading data from database: &quot; + exception.getMessage());" ElType="." rngLn="106">
          <Props>
            <Prop key="Tracked variables" val="statement" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="14739560" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="107" ln="107" srcRngEndPos="25" srcRngStartln="107" srcRngStartPos="12" desc="return false;" ElType="." rngLn="107">
          <Props>
            <Prop key="Tracked variables" val="statement" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="30537853" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="111" ln="111" srcRngEndPos="5" srcRngStartln="111" srcRngStartPos="4" desc="}" ElType=".P" rngLn="111">
          <Props>
            <Prop key="Tracked variables" val="statement" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/nbank/Customer.java" ln="111" tool="jtest" lnHash="30537853" lang="java" lineHash="30537853" locRef="4" risk="Undefined" id="-1276137661" locStartln="111" locStartPos="4" rule="BD.RES.LEAKS" locEndPos="5" causeLocRef="4" FirstElSrcRngEndLn="98" hash="-1099120371" FirstElSrcRngStartln="98" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="111" locType="sr" pkg="examples.nbank" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="JDBC resultset not closed: resultSet" goals="1," locFile="/demo/src/examples/nbank/Customer.java" dumpId="6" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="48">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="4" lineHash="-1809401071" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="81" ln="81" srcRngEndPos="37" srcRngStartln="81" srcRngStartPos="8" desc="Connection connection = null;" ElType="." rngLn="81">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-185589454" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="82" ln="82" srcRngEndPos="43" srcRngStartln="82" srcRngStartPos="8" desc="PreparedStatement statement = null;" ElType="." rngLn="82">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1589018789" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="83" ln="83" srcRngEndPos="35" srcRngStartln="83" srcRngStartPos="8" desc="ResultSet resultSet = null;" ElType="." rngLn="83">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-439487439" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="86" ln="86" srcRngEndPos="53" srcRngStartln="86" srcRngStartPos="12" desc="Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;);" ElType="." rngLn="86">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="1774293749" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="87" ln="87" srcRngEndPos="78" srcRngStartln="87" srcRngStartPos="12" desc="connection = DriverManager.getConnection(&quot;bank&quot;, &quot;bank&quot;, &quot;system&quot;)" ElType="." rngLn="87">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1624193955" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="97" ln="97" srcRngEndPos="94" srcRngStartln="97" srcRngStartPos="12" desc="statement = connection.prepareStatement(&quot;select * from accounts where id=&quot; + _ssn)" ElType="." rngLn="97">
          <Props />
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1368283926" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="98" ln="98" srcRngEndPos="48" srcRngStartln="98" srcRngStartPos="12" desc="resultSet = statement.executeQuery()" ElType=".C" rngLn="98">
          <Props>
            <Prop key="Tracked variables" val="resultSet" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="612379775" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="100" ln="100" srcRngEndPos="42" srcRngStartln="100" srcRngStartPos="12" desc="_name = resultSet.getString(0)" ElType="!E" rngLn="100" thrownTypes="SQLException" throwingMethod="ResultSet.getString">
          <Props>
            <Prop key="Tracked variables" val="resultSet" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="-1741528140" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="105" ln="105" srcRngEndPos="41" srcRngStartln="105" srcRngStartPos="10" desc="catch (SQLException exception)" ElType="." rngLn="105">
          <Props>
            <Prop key="Tracked variables" val="resultSet" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="875386708" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="106" ln="106" srcRngEndPos="94" srcRngStartln="106" srcRngStartPos="12" desc="System.err.println(&quot;Error loading data from database: &quot; + exception.getMessage());" ElType="." rngLn="106">
          <Props>
            <Prop key="Tracked variables" val="resultSet" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="14739560" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="107" ln="107" srcRngEndPos="25" srcRngStartln="107" srcRngStartPos="12" desc="return false;" ElType="." rngLn="107">
          <Props>
            <Prop key="Tracked variables" val="resultSet" />
          </Props>
        </ElDesc>
        <ElDesc locRef="4" lineHash="30537853" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="111" ln="111" srcRngEndPos="5" srcRngStartln="111" srcRngStartPos="4" desc="}" ElType=".P" rngLn="111">
          <Props>
            <Prop key="Tracked variables" val="resultSet" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="32" hash="-747787682" tool="jtest" locEndLn="32" locType="sr" lnHash="1167266503" pkg="examples.nbank" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'out' is not closed within a &quot;finally&quot; block" lang="java" risk="Undefined" lineHash="1167266503" locRef="7" goals="0," locStartln="32" locStartPos="8" locFile="/demo/src/examples/nbank/LogAccountInfo.java" rule="OPT.CIO" locEndPos="11" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/nbank/LogAccountInfo.java" ln="36" tool="jtest" lnHash="30537853" lang="java" lineHash="30537853" locRef="7" risk="Undefined" id="401485796" locStartln="36" locStartPos="4" rule="BD.RES.LEAKS" locEndPos="5" causeLocRef="7" FirstElSrcRngEndLn="32" hash="-747787682" FirstElSrcRngStartln="32" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="36" locType="sr" pkg="examples.nbank" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="33" msg="Stream not closed: &lt;Writer referenced by out>" goals="1," locFile="/demo/src/examples/nbank/LogAccountInfo.java" dumpId="7" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="53">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="7" lineHash="-1266585637" srcRnghash="-747787682" locType="sr" srcRngFile="/demo/src/examples/nbank/LogAccountInfo.java" srcRngEndLn="28" ln="28" srcRngEndPos="43" srcRngStartln="28" srcRngStartPos="8" desc="int balance = account.getBalance();" ElType="." rngLn="28">
          <ElDescList>
            <ElDesc locRef="12" lineHash="1062884174" srcRnghash="513011559" locType="sr" srcRngFile="/demo/src/examples/nbank/Account.java" srcRngEndLn="59" ln="59" srcRngEndPos="24" srcRngStartln="59" srcRngStartPos="8" desc="return _balance;" ElType="." rngLn="59">
              <Props />
            </ElDesc>
          </ElDescList>
          <Props />
        </ElDesc>
        <ElDesc locRef="7" lineHash="982624099" srcRnghash="-747787682" locType="sr" srcRngFile="/demo/src/examples/nbank/LogAccountInfo.java" srcRngEndLn="29" ln="29" srcRngEndPos="36" srcRngStartln="29" srcRngStartPos="8" desc="String id = account.getID();" ElType="." rngLn="29">
          <ElDescList>
            <ElDesc locRef="12" lineHash="99950369" srcRnghash="513011559" locType="sr" srcRngFile="/demo/src/examples/nbank/Account.java" srcRngEndLn="49" ln="49" srcRngEndPos="33" srcRngStartln="49" srcRngStartPos="15" desc="_customer.getSSN()" ElType="." rngLn="49">
              <ElDescList>
                <ElDesc locRef="4" lineHash="-1545242148" srcRnghash="-1099120371" locType="sr" srcRngFile="/demo/src/examples/nbank/Customer.java" srcRngEndLn="40" ln="40" srcRngEndPos="20" srcRngStartln="40" srcRngStartPos="8" desc="return _ssn;" ElType="." rngLn="40">
                  <Props />
                </ElDesc>
              </ElDescList>
              <Props />
            </ElDesc>
            <ElDesc locRef="12" lineHash="99950369" srcRnghash="513011559" locType="sr" srcRngFile="/demo/src/examples/nbank/Account.java" srcRngEndLn="49" ln="49" srcRngEndPos="34" srcRngStartln="49" srcRngStartPos="8" desc="return _customer.getSSN();" ElType="." rngLn="49">
              <Props />
            </ElDesc>
          </ElDescList>
          <Props />
        </ElDesc>
        <ElDesc locRef="7" lineHash="1988542388" srcRnghash="-747787682" locType="sr" srcRngFile="/demo/src/examples/nbank/LogAccountInfo.java" srcRngEndLn="30" ln="30" srcRngEndPos="45" srcRngStartln="30" srcRngStartPos="8" desc="File file = new File(&quot;account&quot; + id);" ElType="." rngLn="30">
          <Props />
        </ElDesc>
        <ElDesc locRef="7" lineHash="-176606277" srcRnghash="-747787682" locType="sr" srcRngFile="/demo/src/examples/nbank/LogAccountInfo.java" srcRngEndLn="31" ln="31" srcRngEndPos="27" srcRngStartln="31" srcRngStartPos="8" desc="BufferedWriter out;" ElType="." rngLn="31">
          <Props />
        </ElDesc>
        <ElDesc locRef="7" lineHash="1167266503" srcRnghash="-747787682" locType="sr" srcRngFile="/demo/src/examples/nbank/LogAccountInfo.java" srcRngEndLn="32" ln="32" srcRngEndPos="55" srcRngStartln="32" srcRngStartPos="8" desc="out = new BufferedWriter(new FileWriter(file));" ElType=".C" rngLn="32">
          <Props>
            <Prop key="Tracked variables" val="new FileWriter(file)" />
          </Props>
        </ElDesc>
        <ElDesc locRef="7" lineHash="673915350" srcRnghash="-747787682" locType="sr" srcRngFile="/demo/src/examples/nbank/LogAccountInfo.java" srcRngEndLn="33" ln="33" srcRngEndPos="22" srcRngStartln="33" srcRngStartPos="8" desc="out.write(id);" ElType="!E" rngLn="33" thrownTypes="IOException" throwingMethod="Writer.write">
          <Props>
            <Prop key="Tracked variables" val="&lt;Writer referenced by out>" />
          </Props>
        </ElDesc>
        <ElDesc locRef="7" lineHash="30537853" srcRnghash="-747787682" locType="sr" srcRngFile="/demo/src/examples/nbank/LogAccountInfo.java" srcRngEndLn="36" ln="36" srcRngEndPos="5" srcRngStartln="36" srcRngStartPos="4" desc="}" ElType=".P" rngLn="36">
          <Props>
            <Prop key="Tracked variables" val="&lt;Writer referenced by out>" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="2" ln="106" hash="-1062638543" urgent="true" tool="jtest" locEndLn="106" locType="sr" lnHash="1821395361" pkg="examples.nbank" analyzer="com.parasoft.jtest.standards.checkers.java" msg="&quot;!=&quot; is used when comparing 'String' Objects. 'equals()' should be used instead" lang="java" risk="Undefined" lineHash="1821395361" locRef="10" goals="1," locStartln="106" locStartPos="12" locFile="/demo/src/examples/nbank/CreditCard.java" rule="PB.CUB.UEIC" locEndPos="42" prio="Not Defined" auth="mar" />
    <FlowViol sev="2" FirstElSrcRngFile="/demo/src/examples/nbank/WithdrawalTransaction.java" ln="16" tool="jtest" lnHash="1547270179" lang="java" lineHash="1547270179" locRef="11" id="2082319574" locStartln="16" locStartPos="8" rule="BD.PB.CC" locEndPos="13" causeLocRef="11" FirstElSrcRngEndLn="15" hash="-908751267" urgent="true" FirstElSrcRngStartln="14" ruleSCSCMsg="Path start point" locEndLn="17" locType="sr" pkg="examples.nbank" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="11" msg="Condition &quot;amount &lt; 0 &amp;&amp; amount > MAX_WITHDRAW&quot; always evaluates to false" goals="1," locFile="/demo/src/examples/nbank/WithdrawalTransaction.java" dumpId="8" ruleSAFMsg="Point where Senseless Condition is Used" auth="mar" FirstElSrcRngEndPos="4">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc locRef="11" lineHash="772251594" srcRnghash="-908751267" locType="sr" srcRngFile="/demo/src/examples/nbank/WithdrawalTransaction.java" srcRngEndLn="15" ln="14" srcRngEndPos="4" srcRngStartln="14" srcRngStartPos="11" desc="WithdrawalTransaction(int amount)" ElType=".C" rngLn="14">
          <Props />
        </ElDesc>
        <ElDesc locRef="11" lineHash="1547270179" srcRnghash="-908751267" locType="sr" srcRngFile="/demo/src/examples/nbank/WithdrawalTransaction.java" srcRngEndLn="17" ln="16" srcRngEndPos="13" srcRngStartln="16" srcRngStartPos="8" desc="if (amount &lt; 0 &amp;&amp; amount > MAX_WITHDRAW)" ElType=".P" rngLn="16">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="1" ln="16" hash="-908751267" tool="jtest" locEndLn="16" locType="sr" lnHash="1547270179" pkg="examples.nbank" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Conditional expression always evaluates to &quot;false&quot;" lang="java" lineHash="1547270179" locRef="11" goals="0," locStartln="16" locStartPos="12" locFile="/demo/src/examples/nbank/WithdrawalTransaction.java" rule="PB.USC.CC" locEndPos="47" auth="mar" />
    <FlowViol sev="2" FirstElSrcRngFile="/demo/src/examples/nbank/Account.java" ln="40" tool="jtest" lnHash="-1629402064" lang="java" lineHash="-1629402064" locRef="12" id="-1591737416" locStartln="40" locStartPos="19" rule="BD.PB.CC" locEndPos="54" causeLocRef="12" FirstElSrcRngEndLn="37" hash="513011559" urgent="true" FirstElSrcRngStartln="36" ruleSCSCMsg="Path start point" locEndLn="40" locType="sr" pkg="examples.nbank" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="19" msg="Condition &quot;initial_balance >= 5000&quot; always evaluates to true" goals="1," locFile="/demo/src/examples/nbank/Account.java" dumpId="9" ruleSAFMsg="Point where Senseless Condition is Used" auth="mar" FirstElSrcRngEndPos="4">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc locRef="12" lineHash="1751562066" srcRnghash="513011559" locType="sr" srcRngFile="/demo/src/examples/nbank/Account.java" srcRngEndLn="37" ln="36" srcRngEndPos="4" srcRngStartln="36" srcRngStartPos="19" desc="setAccountStatus(int initial_balance)" ElType=".C" rngLn="36">
          <Props />
        </ElDesc>
        <ElDesc locRef="12" lineHash="-1542678554" srcRnghash="513011559" locType="sr" srcRngFile="/demo/src/examples/nbank/Account.java" srcRngEndLn="38" ln="38" srcRngEndPos="49" srcRngStartln="38" srcRngStartPos="8" desc="if (initial_balance &lt; BALANCE_GOLD_MIN) {" ElType="." rngLn="38">
          <Props />
        </ElDesc>
        <ElDesc locRef="12" lineHash="-1629402064" srcRnghash="513011559" locType="sr" srcRngFile="/demo/src/examples/nbank/Account.java" srcRngEndLn="40" ln="40" srcRngEndPos="54" srcRngStartln="40" srcRngStartPos="19" desc="initial_balance >= BALANCE_GOLD_MIN" ElType=".P" rngLn="40">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="1" ln="87" hash="513011559" tool="jtest" locEndLn="87" locType="sr" lnHash="-1049210922" pkg="examples.nbank" analyzer="com.parasoft.jtest.standards.checkers.java" msg="'List' field '_newAccountsLog' is never read" lang="java" lineHash="-1049210922" locRef="12" goals="0," locStartln="87" locStartPos="24" locFile="/demo/src/examples/nbank/Account.java" rule="UC.AURCO" locEndPos="39" auth="mar" />
    <StdViol sev="3" ln="79" hash="1404916178" urgent="true" tool="jtest" locEndLn="79" locType="sr" lnHash="100329092" pkg="examples.stackmachine" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'value' is never used" lang="java" lineHash="100329092" locRef="16" goals="1," locStartln="79" locStartPos="20" locFile="/demo/src/examples/stackmachine/CommandLineStackMachine.java" rule="UC.AURV" locEndPos="25" auth="mar" />
    <MetViol sev="3" ln="12" hash="530587698" urgent="true" tool="jtest" locEndLn="13" locType="sr" lnHash="1409842979" analyzer="com.parasoft.jtest.standards.metrics.analyzer" msg="Value 8 is out of acceptable range: 'lower than 7'" lang="java" locRef="22" lineHash="1409842979" goals="1," locStartln="12" locStartPos="0" locFile="/demo/src/examples/metrics/MetricsExample.java" rule="METRIC.NBD" locEndPos="0" auth="mar" />
    <StdViol sev="2" ln="29" hash="140711041" tool="jtest" locEndLn="29" locType="sr" lnHash="155591883" pkg="examples.eval" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Text label 'case10' may be a typo for 'case 10'" lang="java" risk="Undefined" lineHash="155591883" locRef="23" goals="0," locStartln="29" locStartPos="8" locFile="/demo/src/examples/eval/Simple.java" rule="PB.TYPO.TLS" locEndPos="14" prio="Not Defined" auth="mar" />
    <StdViol sev="3" ln="29" hash="140711041" tool="jtest" locEndLn="29" locType="sr" lnHash="155591883" pkg="examples.eval" analyzer="com.parasoft.jtest.standards.checkers.rulewizard" msg="Avoid unused label: case10" lang="java" risk="Undefined" lineHash="155591883" locRef="23" goals="0," locStartln="29" locStartPos="8" locFile="/demo/src/examples/eval/Simple.java" rule="UC.AUL" locEndPos="14" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseLogging.java" ln="11" tool="jtest" lnHash="30537853" lang="java" lineHash="30537853" locRef="24" risk="Undefined" id="1855775880" locStartln="11" locStartPos="4" rule="BD.RES.LEAKS" locEndPos="5" causeLocRef="24" FirstElSrcRngEndLn="8" hash="2061096365" FirstElSrcRngStartln="8" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="11" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="33" msg="Logging handler not closed: handler" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseLogging.java" dumpId="10" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="53">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="24" lineHash="-653749919" srcRnghash="2061096365" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseLogging.java" srcRngEndLn="8" ln="8" srcRngEndPos="54" srcRngStartln="8" srcRngStartPos="8" desc="ConsoleHandler handler = new ConsoleHandler();" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="new ConsoleHandler()" />
          </Props>
        </ElDesc>
        <ElDesc locRef="24" lineHash="552956635" srcRnghash="2061096365" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseLogging.java" srcRngEndLn="9" ln="9" srcRngEndPos="57" srcRngStartln="9" srcRngStartPos="8" desc="LogRecord record = new LogRecord(level, message);" ElType="." rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="handler" />
          </Props>
        </ElDesc>
        <ElDesc locRef="24" lineHash="495744864" srcRnghash="2061096365" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseLogging.java" srcRngEndLn="10" ln="10" srcRngEndPos="32" srcRngStartln="10" srcRngStartPos="8" desc="handler.publish(record);" ElType="." rngLn="10">
          <Props>
            <Prop key="Tracked variables" val="handler" />
          </Props>
        </ElDesc>
        <ElDesc locRef="24" lineHash="30537853" srcRnghash="2061096365" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseLogging.java" srcRngEndLn="11" ln="11" srcRngEndPos="5" srcRngStartln="11" srcRngStartPos="4" desc="}" ElType=".P" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="handler" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" ln="43" tool="jtest" lnHash="-395689623" lang="java" lineHash="-395689623" locRef="25" risk="Undefined" id="-1009618110" locStartln="43" locStartPos="12" rule="BD.PB.NOTINITCTOR" locEndPos="60" causeLocRef="25" FirstElSrcRngEndLn="31" ruleRIPMsg="Point of Implicit Initialization" hash="-158891849" FirstElSrcRngStartln="31" urgent="true" ruleSCSCMsg="Point of Explicit Initialization" locEndLn="43" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;this.minLoginLength&quot; is used prior to explicit initialization" goals="1," locFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" dumpId="11" prio="Not Defined" ruleSAFMsg="Usage Point" auth="mar" FirstElSrcRngEndPos="31">
      <Props>
        <Prop key="Tracked variables" val="Not explicitly initialized value" />
      </Props>
      <ElDescList>
        <ElDesc locRef="25" lineHash="-749467591" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="31" ln="31" srcRngEndPos="31" srcRngStartln="31" srcRngStartPos="8" desc="int minLoginLength = 7;" ElType=".I" rngLn="31">
          <Props>
            <Prop key="Tracked variables" val="this.minLoginLength" />
          </Props>
        </ElDesc>
        <ElDesc locRef="25" lineHash="1444358553" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="35" ln="35" srcRngEndPos="34" srcRngStartln="35" srcRngStartPos="12" desc="super(name, password);" ElType="!" rngLn="35">
          <ElDescList>
            <ElDesc locRef="25" lineHash="32660008" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="17" ln="17" srcRngEndPos="29" srcRngStartln="17" srcRngStartPos="12" desc="this.name = name;" ElType="." rngLn="17">
              <Props>
                <Prop key="Tracked variables" val="this.minLoginLength" />
              </Props>
            </ElDesc>
            <ElDesc locRef="25" lineHash="555503656" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="18" ln="18" srcRngEndPos="37" srcRngStartln="18" srcRngStartPos="12" desc="this.password = password;" ElType="." rngLn="18">
              <Props>
                <Prop key="Tracked variables" val="this.minLoginLength" />
              </Props>
            </ElDesc>
            <ElDesc locRef="25" lineHash="1197745480" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="19" ln="19" srcRngEndPos="24" srcRngStartln="19" srcRngStartPos="12" desc="checkData();" ElType="!" rngLn="19">
              <ElDescList>
                <ElDesc locRef="25" lineHash="-395689623" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="43" ln="43" srcRngEndPos="60" srcRngStartln="43" srcRngStartPos="12" desc="if (super.name.length() &lt; this.minLoginLength) {" ElType=".P" rngLn="43">
                  <Props>
                    <Prop key="Tracked variables" val="this.minLoginLength" />
                  </Props>
                </ElDesc>
              </ElDescList>
              <Props>
                <Prop key="Tracked variables" val="this.minLoginLength" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="this.minLoginLength" />
          </Props>
        </ElDesc>
        <ElDesc locRef="25" lineHash="-749467591" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="31" ln="31" srcRngEndPos="31" srcRngStartln="31" srcRngStartPos="8" desc="int minLoginLength = 7;" ElType=".C" rngLn="31">
          <Props>
            <Prop key="Tracked variables" val="this.minLoginLength" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" ln="43" tool="jtest" lnHash="-395689623" lang="java" lineHash="-395689623" locRef="25" risk="Undefined" id="-1748997044" locStartln="43" locStartPos="16" rule="BD.PB.NOTEXPLINIT" locEndPos="57" causeLocRef="25" FirstElSrcRngEndLn="31" hash="-158891849" FirstElSrcRngStartln="31" urgent="true" ruleSCSCMsg="Source of Implicitly Initialized Value" locEndLn="43" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;this.minLoginLength&quot; is used prior to explicit initialization" goals="1," locFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" dumpId="12" prio="Not Defined" ruleSAFMsg="Usage Point" auth="mar" FirstElSrcRngEndPos="31">
      <Props>
        <Prop key="Tracked variables" val="Not explicitly initialized value" />
      </Props>
      <ElDescList>
        <ElDesc locRef="25" lineHash="-749467591" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="31" ln="31" srcRngEndPos="31" srcRngStartln="31" srcRngStartPos="8" desc="int minLoginLength = 7;" ElType=".C" rngLn="31">
          <Props>
            <Prop key="Tracked variables" val="this.minLoginLength" />
          </Props>
        </ElDesc>
        <ElDesc locRef="25" lineHash="1444358553" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="35" ln="35" srcRngEndPos="34" srcRngStartln="35" srcRngStartPos="12" desc="super(name, password);" ElType="!" rngLn="35">
          <ElDescList>
            <ElDesc locRef="25" lineHash="32660008" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="17" ln="17" srcRngEndPos="29" srcRngStartln="17" srcRngStartPos="12" desc="this.name = name;" ElType="." rngLn="17">
              <Props>
                <Prop key="Tracked variables" val="this.minLoginLength" />
              </Props>
            </ElDesc>
            <ElDesc locRef="25" lineHash="555503656" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="18" ln="18" srcRngEndPos="37" srcRngStartln="18" srcRngStartPos="12" desc="this.password = password;" ElType="." rngLn="18">
              <Props>
                <Prop key="Tracked variables" val="this.minLoginLength" />
              </Props>
            </ElDesc>
            <ElDesc locRef="25" lineHash="1197745480" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="19" ln="19" srcRngEndPos="24" srcRngStartln="19" srcRngStartPos="12" desc="checkData();" ElType="!" rngLn="19">
              <ElDescList>
                <ElDesc locRef="25" lineHash="-395689623" srcRnghash="-158891849" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" srcRngEndLn="43" ln="43" srcRngEndPos="57" srcRngStartln="43" srcRngStartPos="16" desc="super.name.length() &lt; this.minLoginLength" ElType=".P" rngLn="43">
                  <Props>
                    <Prop key="Tracked variables" val="this.minLoginLength" />
                  </Props>
                </ElDesc>
              </ElDescList>
              <Props>
                <Prop key="Tracked variables" val="this.minLoginLength" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="this.minLoginLength" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" ln="14" tool="jtest" lnHash="2103670358" lang="java" lineHash="2103670358" locRef="26" risk="Undefined" id="-442001953" locStartln="14" locStartPos="8" rule="BD.RES.LEAKS" locEndPos="9" causeLocRef="26" FirstElSrcRngEndLn="10" hash="-1127058647" FirstElSrcRngStartln="10" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="14" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="Security context not disposed: context" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" dumpId="13" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="80">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="26" lineHash="263012191" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="10" ln="10" srcRngEndPos="80" srcRngStartln="10" srcRngStartPos="12" desc="GSSContext context = GSSManager.getInstance().createContext(tokens);" ElType=".C" rngLn="10">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
        <ElDesc locRef="26" lineHash="-1084133542" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="11" ln="11" srcRngEndPos="45" srcRngStartln="11" srcRngStartPos="12" desc="byte[] inputBuff = new byte[256];" ElType="." rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
        <ElDesc locRef="26" lineHash="-852100649" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="12" ln="12" srcRngEndPos="54" srcRngStartln="12" srcRngStartPos="12" desc="context.initSecContext(inputBuff, 0, 256);" ElType="." rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
        <ElDesc locRef="26" lineHash="2103670358" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="14" ln="14" srcRngEndPos="9" srcRngStartln="14" srcRngStartPos="8" desc="}" ElType=".P" rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" ln="30" tool="jtest" lnHash="229487401" lang="java" lineHash="229487401" locRef="26" risk="Undefined" id="-941851846" locStartln="30" locStartPos="18" rule="BD.EXCEPT.NP" locEndPos="36" causeLocRef="26" FirstElSrcRngEndLn="21" hash="-1127058647" FirstElSrcRngStartln="21" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="30" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;context&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" dumpId="14" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="34">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="26" lineHash="-1434008792" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="21" ln="21" srcRngEndPos="34" srcRngStartln="21" srcRngStartPos="8" desc="GSSContext context = null;" ElType=".C" rngLn="21">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
        <ElDesc locRef="26" lineHash="1900478135" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="23" ln="23" srcRngEndPos="68" srcRngStartln="23" srcRngStartPos="12" desc="context = GSSManager.getInstance().createContext(tokens)" ElType="!E" rngLn="23" thrownTypes="GSSException" throwingMethod="GSSManager.createContext">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
        <ElDesc locRef="26" lineHash="2103670358" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="27" ln="27" srcRngEndPos="32" srcRngStartln="27" srcRngStartPos="10" desc="catch (Exception ioe)" ElType="." rngLn="27">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
        <ElDesc locRef="26" lineHash="1266022184" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="28" ln="28" srcRngEndPos="60" srcRngStartln="28" srcRngStartPos="12" desc="System.out.println(&quot;Exception occured: &quot; + ioe);" ElType="." rngLn="28">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
        <ElDesc locRef="26" lineHash="229487401" srcRnghash="-1127058647" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" srcRngEndLn="30" ln="30" srcRngEndPos="36" srcRngStartln="30" srcRngStartPos="18" desc="context.dispose();" ElType=".P" rngLn="30">
          <Props>
            <Prop key="Tracked variables" val="context" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" ln="52" tool="jtest" lnHash="1289477876" lang="java" lineHash="1289477876" locRef="28" risk="Undefined" id="1758870174" locStartln="52" locStartPos="12" rule="BD.EXCEPT.NP" locEndPos="28" causeLocRef="28" FirstElSrcRngEndLn="43" hash="-1724845119" FirstElSrcRngStartln="43" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="52" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;encoder&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" dumpId="15" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="34">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="28" lineHash="1358363122" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="43" ln="43" srcRngEndPos="34" srcRngStartln="43" srcRngStartPos="8" desc="XMLEncoder encoder = null;" ElType=".C" rngLn="43">
          <Props>
            <Prop key="Tracked variables" val="encoder" />
          </Props>
        </ElDesc>
        <ElDesc locRef="28" lineHash="529589572" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="45" ln="45" srcRngEndPos="41" srcRngStartln="45" srcRngStartPos="22" desc="new XMLEncoder(out)" ElType="!E" rngLn="45" thrownTypes="RuntimeException" throwingMethod="XMLEncoder.XMLEncoder">
          <Props>
            <Prop key="Tracked variables" val="encoder" />
          </Props>
        </ElDesc>
        <ElDesc locRef="28" lineHash="100324464" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="49" ln="49" srcRngEndPos="30" srcRngStartln="49" srcRngStartPos="10" desc="catch (Exception e)" ElType="." rngLn="49">
          <Props>
            <Prop key="Tracked variables" val="encoder" />
          </Props>
        </ElDesc>
        <ElDesc locRef="28" lineHash="957734862" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="50" ln="50" srcRngEndPos="58" srcRngStartln="50" srcRngStartPos="12" desc="System.out.println(&quot;Exception occured: &quot; + e);" ElType="." rngLn="50">
          <Props>
            <Prop key="Tracked variables" val="encoder" />
          </Props>
        </ElDesc>
        <ElDesc locRef="28" lineHash="1289477876" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="52" ln="52" srcRngEndPos="28" srcRngStartln="52" srcRngStartPos="12" desc="encoder.close();" ElType=".P" rngLn="52">
          <Props>
            <Prop key="Tracked variables" val="encoder" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" ln="72" tool="jtest" lnHash="1116947660" lang="java" lineHash="1116947660" locRef="28" risk="Undefined" id="1768090087" locStartln="72" locStartPos="12" rule="BD.EXCEPT.NP" locEndPos="28" causeLocRef="28" FirstElSrcRngEndLn="59" hash="-1724845119" FirstElSrcRngStartln="59" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="72" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;decoder&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" dumpId="16" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="34">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="28" lineHash="-1310850359" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="58" ln="58" srcRngEndPos="36" srcRngStartln="58" srcRngStartPos="8" desc="Vector vObjs = new Vector();" ElType="." rngLn="58">
          <Props />
        </ElDesc>
        <ElDesc locRef="28" lineHash="23744578" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="59" ln="59" srcRngEndPos="34" srcRngStartln="59" srcRngStartPos="8" desc="XMLDecoder decoder = null;" ElType=".C" rngLn="59">
          <Props>
            <Prop key="Tracked variables" val="decoder" />
          </Props>
        </ElDesc>
        <ElDesc locRef="28" lineHash="-1321082029" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="61" ln="61" srcRngEndPos="40" srcRngStartln="61" srcRngStartPos="22" desc="new XMLDecoder(in)" ElType="!E" rngLn="61" thrownTypes="ArrayIndexOutOfBoundsException" throwingMethod="XMLDecoder.XMLDecoder">
          <Props>
            <Prop key="Tracked variables" val="decoder" />
          </Props>
        </ElDesc>
        <ElDesc locRef="28" lineHash="1113544606" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="69" ln="67" srcRngEndPos="9" srcRngStartln="67" srcRngStartPos="10" desc="catch (ArrayIndexOutOfBoundsException endException) {" ElType="." rngLn="67">
          <Props>
            <Prop key="Tracked variables" val="decoder" />
          </Props>
        </ElDesc>
        <ElDesc locRef="28" lineHash="1116947660" srcRnghash="-1724845119" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" srcRngEndLn="72" ln="72" srcRngEndPos="28" srcRngStartln="72" srcRngStartPos="12" desc="decoder.close();" ElType=".P" rngLn="72">
          <Props>
            <Prop key="Tracked variables" val="decoder" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="12" hash="1801833364" tool="jtest" locEndLn="12" locType="sr" lnHash="609178338" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'read' is never used" lang="java" risk="Undefined" lineHash="609178338" locRef="29" goals="0," locStartln="12" locStartPos="16" locFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" rule="UC.AURV" locEndPos="20" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" ln="14" tool="jtest" lnHash="100324464" lang="java" lineHash="100324464" locRef="29" risk="Undefined" id="-1664007899" locStartln="14" locStartPos="8" rule="BD.RES.LEAKS" locEndPos="9" causeLocRef="29" FirstElSrcRngEndLn="10" hash="1801833364" FirstElSrcRngStartln="10" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="14" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="35" msg="File not closed: raf" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" dumpId="17" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="73">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="29" lineHash="1121458434" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="8" ln="8" srcRngEndPos="26" srcRngStartln="8" srcRngStartPos="8" desc="String res = null;" ElType="." rngLn="8">
          <Props />
        </ElDesc>
        <ElDesc locRef="29" lineHash="-1850530378" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="10" ln="10" srcRngEndPos="74" srcRngStartln="10" srcRngStartPos="12" desc="RandomAccessFile raf = new RandomAccessFile(sFileName, sMode);" ElType=".C" rngLn="10">
          <Props>
            <Prop key="Tracked variables" val="new RandomAccessFile(sFileName, sMode)" />
          </Props>
        </ElDesc>
        <ElDesc locRef="29" lineHash="1113991407" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="11" ln="11" srcRngEndPos="41" srcRngStartln="11" srcRngStartPos="12" desc="byte[] bytes = new byte[512];" ElType="." rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="raf" />
          </Props>
        </ElDesc>
        <ElDesc locRef="29" lineHash="609178338" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="12" ln="12" srcRngEndPos="61" srcRngStartln="12" srcRngStartPos="12" desc="int read = raf.read(bytes, offset, bytes.length);" ElType="!E" rngLn="12" thrownTypes="IOException" throwingMethod="RandomAccessFile.read">
          <Props>
            <Prop key="Tracked variables" val="raf" />
          </Props>
        </ElDesc>
        <ElDesc locRef="29" lineHash="100324464" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="14" ln="14" srcRngEndPos="9" srcRngStartln="14" srcRngStartPos="8" desc="}" ElType=".P" rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="raf" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="27" hash="1801833364" urgent="true" tool="jtest" locEndLn="27" locType="sr" lnHash="609178338" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'read' is never used" lang="java" risk="Undefined" lineHash="609178338" locRef="29" goals="1," locStartln="27" locStartPos="16" locFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" rule="UC.AURV" locEndPos="20" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" ln="32" tool="jtest" lnHash="-1763786582" lang="java" lineHash="-1763786582" locRef="29" risk="Undefined" id="272824712" locStartln="32" locStartPos="18" rule="BD.EXCEPT.NP" locEndPos="30" causeLocRef="29" FirstElSrcRngEndLn="23" hash="1801833364" FirstElSrcRngStartln="23" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="32" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;raf&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" dumpId="18" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="36">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="29" lineHash="1121458434" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="22" ln="22" srcRngEndPos="26" srcRngStartln="22" srcRngStartPos="8" desc="String res = null;" ElType="." rngLn="22">
          <Props />
        </ElDesc>
        <ElDesc locRef="29" lineHash="-1186737013" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="23" ln="23" srcRngEndPos="36" srcRngStartln="23" srcRngStartPos="8" desc="RandomAccessFile raf = null;" ElType=".C" rngLn="23">
          <Props>
            <Prop key="Tracked variables" val="raf" />
          </Props>
        </ElDesc>
        <ElDesc locRef="29" lineHash="1370866899" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="25" ln="25" srcRngEndPos="56" srcRngStartln="25" srcRngStartPos="18" desc="new RandomAccessFile(sFileName, sMode)" ElType="!E" rngLn="25" thrownTypes="FileNotFoundException" throwingMethod="RandomAccessFile.RandomAccessFile">
          <Props>
            <Prop key="Tracked variables" val="raf" />
          </Props>
        </ElDesc>
        <ElDesc locRef="29" lineHash="100324464" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="29" ln="29" srcRngEndPos="30" srcRngStartln="29" srcRngStartPos="10" desc="catch (Exception e)" ElType="." rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="raf" />
          </Props>
        </ElDesc>
        <ElDesc locRef="29" lineHash="2082685994" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="30" ln="30" srcRngEndPos="33" srcRngStartln="30" srcRngStartPos="12" desc="System.out.println();" ElType="." rngLn="30">
          <Props>
            <Prop key="Tracked variables" val="raf" />
          </Props>
        </ElDesc>
        <ElDesc locRef="29" lineHash="-1763786582" srcRnghash="1801833364" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" srcRngEndLn="32" ln="32" srcRngEndPos="30" srcRngStartln="32" srcRngStartPos="18" desc="raf.close();" ElType=".P" rngLn="32">
          <Props>
            <Prop key="Tracked variables" val="raf" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/FilesInjection.java" ln="29" tool="jtest" lnHash="-1243101048" lang="java" lineHash="-1243101048" locRef="31" risk="Undefined" id="-169804862" locStartln="29" locStartPos="12" rule="BD.EXCEPT.NP" locEndPos="25" causeLocRef="31" FirstElSrcRngEndLn="23" hash="275524582" FirstElSrcRngStartln="23" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="29" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;fOut&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/FilesInjection.java" dumpId="19" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="37">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="31" lineHash="1883769468" srcRnghash="275524582" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/FilesInjection.java" srcRngEndLn="23" ln="23" srcRngEndPos="37" srcRngStartln="23" srcRngStartPos="8" desc="FileOutputStream fOut = null;" ElType=".C" rngLn="23">
          <Props>
            <Prop key="Tracked variables" val="fOut" />
          </Props>
        </ElDesc>
        <ElDesc locRef="31" lineHash="760693331" srcRnghash="275524582" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/FilesInjection.java" srcRngEndLn="25" ln="25" srcRngEndPos="41" srcRngStartln="25" srcRngStartPos="12" desc="String sFileName = storyName;" ElType="." rngLn="25">
          <Props>
            <Prop key="Tracked variables" val="fOut" />
          </Props>
        </ElDesc>
        <ElDesc locRef="31" lineHash="1826395322" srcRnghash="275524582" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/FilesInjection.java" srcRngEndLn="26" ln="26" srcRngEndPos="50" srcRngStartln="26" srcRngStartPos="19" desc="new FileOutputStream(sFileName)" ElType="!E" rngLn="26" thrownTypes="FileNotFoundException" throwingMethod="FileOutputStream.FileOutputStream">
          <Props>
            <Prop key="Tracked variables" val="fOut" />
          </Props>
        </ElDesc>
        <ElDesc locRef="31" lineHash="-1243101048" srcRnghash="275524582" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/FilesInjection.java" srcRngEndLn="29" ln="29" srcRngEndPos="25" srcRngStartln="29" srcRngStartPos="12" desc="fOut.close();" ElType=".P" rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="fOut" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="11" hash="-1929223117" tool="jtest" locEndLn="11" locType="sr" lnHash="-657680996" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'sock' is never used" lang="java" risk="Undefined" lineHash="-657680996" locRef="32" goals="0," locStartln="11" locStartPos="19" locFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" rule="UC.AURV" locEndPos="23" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" ln="13" tool="jtest" lnHash="2094668668" lang="java" lineHash="2094668668" locRef="32" risk="Undefined" id="1318501917" locStartln="13" locStartPos="8" rule="BD.RES.LEAKS" locEndPos="9" causeLocRef="32" FirstElSrcRngEndLn="11" hash="-1929223117" FirstElSrcRngStartln="11" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="13" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="Socket not closed: sock" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" dumpId="20" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="45">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="32" lineHash="-657680996" srcRnghash="-1929223117" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" srcRngEndLn="11" ln="11" srcRngEndPos="45" srcRngStartln="11" srcRngStartPos="12" desc="Socket sock = srvSocket.accept();" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="sock" />
          </Props>
        </ElDesc>
        <ElDesc locRef="32" lineHash="2094668668" srcRnghash="-1929223117" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" srcRngEndLn="13" ln="13" srcRngEndPos="9" srcRngStartln="13" srcRngStartPos="8" desc="}" ElType=".P" rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="sock" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" ln="27" tool="jtest" lnHash="-89748885" lang="java" lineHash="-89748885" locRef="32" risk="Undefined" id="1532178496" locStartln="27" locStartPos="18" rule="BD.EXCEPT.NP" locEndPos="31" causeLocRef="32" FirstElSrcRngEndLn="20" hash="-1929223117" FirstElSrcRngStartln="20" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="27" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;sock&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" dumpId="21" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="27">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="32" lineHash="1379796226" srcRnghash="-1929223117" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" srcRngEndLn="20" ln="20" srcRngEndPos="27" srcRngStartln="20" srcRngStartPos="8" desc="Socket sock = null;" ElType=".C" rngLn="20">
          <Props>
            <Prop key="Tracked variables" val="sock" />
          </Props>
        </ElDesc>
        <ElDesc locRef="32" lineHash="250633455" srcRnghash="-1929223117" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" srcRngEndLn="22" ln="22" srcRngEndPos="37" srcRngStartln="22" srcRngStartPos="12" desc="sock = srvSocket.accept()" ElType="!E" rngLn="22" thrownTypes="IOException" throwingMethod="ServerSocket.accept">
          <Props>
            <Prop key="Tracked variables" val="sock" />
          </Props>
        </ElDesc>
        <ElDesc locRef="32" lineHash="2094668668" srcRnghash="-1929223117" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" srcRngEndLn="24" ln="24" srcRngEndPos="34" srcRngStartln="24" srcRngStartPos="10" desc="catch (IOException ioe)" ElType="." rngLn="24">
          <Props>
            <Prop key="Tracked variables" val="sock" />
          </Props>
        </ElDesc>
        <ElDesc locRef="32" lineHash="1266022184" srcRnghash="-1929223117" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" srcRngEndLn="25" ln="25" srcRngEndPos="60" srcRngStartln="25" srcRngStartPos="12" desc="System.out.println(&quot;Exception occured: &quot; + ioe);" ElType="." rngLn="25">
          <Props>
            <Prop key="Tracked variables" val="sock" />
          </Props>
        </ElDesc>
        <ElDesc locRef="32" lineHash="-89748885" srcRnghash="-1929223117" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" srcRngEndLn="27" ln="27" srcRngEndPos="31" srcRngStartln="27" srcRngStartPos="18" desc="sock.close();" ElType=".P" rngLn="27">
          <Props>
            <Prop key="Tracked variables" val="sock" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="11" hash="2003324352" tool="jtest" locEndLn="11" locType="sr" lnHash="-408098528" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'fInput' is not closed within a &quot;finally&quot; block" lang="java" risk="Undefined" lineHash="-408098528" locRef="33" goals="0," locStartln="11" locStartPos="28" locFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" rule="OPT.CIO" locEndPos="34" prio="Not Defined" auth="mar" />
    <StdViol sev="3" ln="14" hash="2003324352" tool="jtest" locEndLn="14" locType="sr" lnHash="1533291916" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'read' is never used" lang="java" risk="Undefined" lineHash="1533291916" locRef="33" goals="0," locStartln="14" locStartPos="16" locFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" rule="UC.AURV" locEndPos="20" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" ln="16" tool="jtest" lnHash="2103670358" lang="java" lineHash="2103670358" locRef="33" risk="Undefined" id="-1350959878" locStartln="16" locStartPos="8" rule="BD.RES.LEAKS" locEndPos="9" causeLocRef="33" FirstElSrcRngEndLn="11" hash="2003324352" FirstElSrcRngStartln="11" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="16" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="37" msg="Stream not closed: fInput, &lt;FileInputStream referenced by channel>, &lt;FileInputStream referenced by fInput.getChannel()>" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" dumpId="22" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="66">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="33" lineHash="-408098528" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="11" ln="11" srcRngEndPos="67" srcRngStartln="11" srcRngStartPos="12" desc="FileInputStream fInput = new FileInputStream(filename);" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="new FileInputStream(filename)" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="-1002974916" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="12" ln="12" srcRngEndPos="54" srcRngStartln="12" srcRngStartPos="12" desc="FileChannel channel = fInput.getChannel();" ElType="!" rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="fInput" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="526245805" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="13" ln="13" srcRngEndPos="54" srcRngStartln="13" srcRngStartPos="12" desc="ByteBuffer dst = ByteBuffer.allocate(512);" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="fInput, &lt;FileInputStream referenced by channel>, &lt;FileInputStream referenced by fInput.getChannel()>" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="1533291916" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="14" ln="14" srcRngEndPos="41" srcRngStartln="14" srcRngStartPos="12" desc="int read = channel.read(dst);" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="fInput, &lt;FileInputStream referenced by channel>, &lt;FileInputStream referenced by fInput.getChannel()>" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="2103670358" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="16" ln="16" srcRngEndPos="9" srcRngStartln="16" srcRngStartPos="8" desc="}" ElType=".P" rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="fInput, &lt;FileInputStream referenced by channel>, &lt;FileInputStream referenced by fInput.getChannel()>" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" ln="16" tool="jtest" lnHash="2103670358" lang="java" lineHash="2103670358" locRef="33" risk="Undefined" id="-1945475282" locStartln="16" locStartPos="8" rule="BD.RES.LEAKS" locEndPos="9" causeLocRef="33" FirstElSrcRngEndLn="12" hash="2003324352" FirstElSrcRngStartln="12" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="16" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="NIO channel not closed: &lt;FileInputStream referenced by channel>.getChannel(), fInput.getChannel(), channel" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" dumpId="23" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="54">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="33" lineHash="-408098528" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="11" ln="11" srcRngEndPos="67" srcRngStartln="11" srcRngStartPos="12" desc="FileInputStream fInput = new FileInputStream(filename);" ElType="." rngLn="11">
          <Props />
        </ElDesc>
        <ElDesc locRef="33" lineHash="-1002974916" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="12" ln="12" srcRngEndPos="54" srcRngStartln="12" srcRngStartPos="12" desc="FileChannel channel = fInput.getChannel();" ElType=".C" rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="&lt;FileInputStream referenced by channel>.getChannel(), fInput.getChannel(), channel" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="526245805" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="13" ln="13" srcRngEndPos="54" srcRngStartln="13" srcRngStartPos="12" desc="ByteBuffer dst = ByteBuffer.allocate(512);" ElType="." rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="&lt;FileInputStream referenced by channel>.getChannel(), fInput.getChannel(), channel" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="1533291916" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="14" ln="14" srcRngEndPos="41" srcRngStartln="14" srcRngStartPos="12" desc="int read = channel.read(dst);" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="&lt;FileInputStream referenced by channel>.getChannel(), fInput.getChannel(), channel" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="2103670358" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="16" ln="16" srcRngEndPos="9" srcRngStartln="16" srcRngStartPos="8" desc="}" ElType=".P" rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="&lt;FileInputStream referenced by channel>.getChannel(), fInput.getChannel(), channel" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="25" hash="2003324352" tool="jtest" locEndLn="25" locType="sr" lnHash="-408098528" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'fInput' is not closed within a &quot;finally&quot; block" lang="java" risk="Undefined" lineHash="-408098528" locRef="33" goals="0," locStartln="25" locStartPos="28" locFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" rule="OPT.CIO" locEndPos="34" prio="Not Defined" auth="mar" />
    <StdViol sev="3" ln="28" hash="2003324352" tool="jtest" locEndLn="28" locType="sr" lnHash="1533291916" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'read' is never used" lang="java" risk="Undefined" lineHash="1533291916" locRef="33" goals="0," locStartln="28" locStartPos="16" locFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" rule="UC.AURV" locEndPos="20" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" ln="33" tool="jtest" lnHash="1414922134" lang="java" lineHash="1414922134" locRef="33" risk="Undefined" id="-1284641186" locStartln="33" locStartPos="18" rule="BD.EXCEPT.NP" locEndPos="34" causeLocRef="33" FirstElSrcRngEndLn="23" hash="2003324352" FirstElSrcRngStartln="23" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="33" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;channel&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" dumpId="24" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="35">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="33" lineHash="1200399739" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="23" ln="23" srcRngEndPos="35" srcRngStartln="23" srcRngStartPos="8" desc="FileChannel channel = null;" ElType=".C" rngLn="23">
          <Props>
            <Prop key="Tracked variables" val="channel" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="-408098528" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="25" ln="25" srcRngEndPos="66" srcRngStartln="25" srcRngStartPos="37" desc="new FileInputStream(filename)" ElType="!E" rngLn="25" thrownTypes="FileNotFoundException" throwingMethod="FileInputStream.FileInputStream">
          <Props>
            <Prop key="Tracked variables" val="channel" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="2103670358" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="30" ln="30" srcRngEndPos="32" srcRngStartln="30" srcRngStartPos="10" desc="catch (Exception ioe)" ElType="." rngLn="30">
          <Props>
            <Prop key="Tracked variables" val="channel" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="1266022184" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="31" ln="31" srcRngEndPos="60" srcRngStartln="31" srcRngStartPos="12" desc="System.out.println(&quot;Exception occured: &quot; + ioe);" ElType="." rngLn="31">
          <Props>
            <Prop key="Tracked variables" val="channel" />
          </Props>
        </ElDesc>
        <ElDesc locRef="33" lineHash="1414922134" srcRnghash="2003324352" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" srcRngEndLn="33" ln="33" srcRngEndPos="34" srcRngStartln="33" srcRngStartPos="18" desc="channel.close();" ElType=".P" rngLn="33">
          <Props>
            <Prop key="Tracked variables" val="channel" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" ln="15" tool="jtest" lnHash="2144542579" lang="java" lineHash="2144542579" locRef="34" risk="Undefined" id="-817336018" locStartln="15" locStartPos="9" rule="BD.CO.ITMOD" locEndPos="23" causeLocRef="34" FirstElSrcRngEndLn="14" ruleRIPMsg="Collection Modification Point" hash="646984787" FirstElSrcRngStartln="14" urgent="true" ruleSCSCMsg="Iterator Creation Point" locEndLn="15" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="2" msg="Iterator &quot;iter&quot; may possibly be used after iterated collection is modified" goals="1," locFile="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" dumpId="25" prio="Not Defined" ruleSAFMsg="Iterator Usage Point" auth="mar" FirstElSrcRngEndPos="40">
      <Props>
        <Prop key="Tracked variables" val="Tracked iterators" />
        <Prop key="Tracked collections" val="Tracked collections" />
      </Props>
      <ElDescList>
        <ElDesc locRef="34" lineHash="1589288245" srcRnghash="646984787" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" srcRngEndLn="14" ln="14" srcRngEndPos="40" srcRngStartln="14" srcRngStartPos="2" desc="Iterator iter = collection.iterator();" ElType=".C" rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="34" lineHash="2144542579" srcRnghash="646984787" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="2" desc="while (iter.hasNext()) {" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="34" lineHash="-1317928354" srcRnghash="646984787" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" srcRngEndLn="16" ln="16" srcRngEndPos="37" srcRngStartln="16" srcRngStartPos="12" desc="Object obj = iter.next();" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="34" lineHash="985784051" srcRnghash="646984787" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" srcRngEndLn="17" ln="17" srcRngEndPos="54" srcRngStartln="17" srcRngStartPos="12" desc="if (tp.isAssignableFrom(obj.getClass())) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="34" lineHash="1295664149" srcRnghash="646984787" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" srcRngEndLn="20" ln="20" srcRngEndPos="35" srcRngStartln="20" srcRngStartPos="12" desc="collection.remove(obj);" ElType=".I" rngLn="20">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="34" lineHash="2144542579" srcRnghash="646984787" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" srcRngEndLn="15" ln="15" srcRngEndPos="23" srcRngStartln="15" srcRngStartPos="9" desc="iter.hasNext()" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" ln="15" tool="jtest" lnHash="100324464" lang="java" lineHash="100324464" locRef="37" risk="Undefined" id="-1460898969" locStartln="15" locStartPos="8" rule="BD.RES.LEAKS" locEndPos="9" causeLocRef="37" FirstElSrcRngEndLn="13" hash="174869257" FirstElSrcRngStartln="13" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="15" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="12" msg="Image resource not closed: imgReader" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" dumpId="26" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="63">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="37" lineHash="-2075299321" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="11" ln="11" srcRngEndPos="27" srcRngStartln="11" srcRngStartPos="8" desc="Image image = null;" ElType="." rngLn="11">
          <Props />
        </ElDesc>
        <ElDesc locRef="37" lineHash="-442960859" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="13" ln="13" srcRngEndPos="63" srcRngStartln="13" srcRngStartPos="12" desc="ImageReader imgReader = spi.createReaderInstance();" ElType=".C" rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="imgReader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="37" lineHash="1833758656" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="14" ln="14" srcRngEndPos="37" srcRngStartln="14" srcRngStartPos="12" desc="image = imgReader.read(0)" ElType="." rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="imgReader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="37" lineHash="100324464" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="15" ln="15" srcRngEndPos="9" srcRngStartln="15" srcRngStartPos="8" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="imgReader" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" ln="31" tool="jtest" lnHash="-281777821" lang="java" lineHash="-281777821" locRef="37" risk="Undefined" id="-1398370375" locStartln="31" locStartPos="12" rule="BD.EXCEPT.NP" locEndPos="32" causeLocRef="37" FirstElSrcRngEndLn="24" hash="174869257" FirstElSrcRngStartln="24" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="31" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;imgReader&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" dumpId="27" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="37">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="37" lineHash="-2075299321" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="23" ln="23" srcRngEndPos="27" srcRngStartln="23" srcRngStartPos="8" desc="Image image = null;" ElType="." rngLn="23">
          <Props />
        </ElDesc>
        <ElDesc locRef="37" lineHash="1423331445" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="24" ln="24" srcRngEndPos="37" srcRngStartln="24" srcRngStartPos="8" desc="ImageReader imgReader = null;" ElType=".C" rngLn="24">
          <Props>
            <Prop key="Tracked variables" val="imgReader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="37" lineHash="379037799" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="26" ln="26" srcRngEndPos="50" srcRngStartln="26" srcRngStartPos="12" desc="imgReader = spi.createReaderInstance()" ElType="!E" rngLn="26" thrownTypes="IOException" throwingMethod="ImageReaderSpi.createReaderInstance">
          <Props>
            <Prop key="Tracked variables" val="imgReader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="37" lineHash="100324464" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="28" ln="28" srcRngEndPos="30" srcRngStartln="28" srcRngStartPos="10" desc="catch (Exception e)" ElType="." rngLn="28">
          <Props>
            <Prop key="Tracked variables" val="imgReader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="37" lineHash="957734862" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="29" ln="29" srcRngEndPos="58" srcRngStartln="29" srcRngStartPos="12" desc="System.out.println(&quot;Exception occured: &quot; + e);" ElType="." rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="imgReader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="37" lineHash="-281777821" srcRnghash="174869257" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" srcRngEndLn="31" ln="31" srcRngEndPos="32" srcRngStartln="31" srcRngStartPos="12" desc="imgReader.dispose();" ElType=".P" rngLn="31">
          <Props>
            <Prop key="Tracked variables" val="imgReader" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" ln="15" tool="jtest" lnHash="-1314484653" lang="java" lineHash="-1314484653" locRef="38" risk="Undefined" id="1910164941" locStartln="15" locStartPos="15" rule="BD.CO.ITMOD" locEndPos="29" causeLocRef="38" FirstElSrcRngEndLn="14" ruleRIPMsg="Collection Modification Point" hash="590524020" FirstElSrcRngStartln="14" urgent="true" ruleSCSCMsg="Iterator Creation Point" locEndLn="15" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="Iterator &quot;iter&quot; may possibly be used after iterated collection is modified" goals="1," locFile="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" dumpId="28" prio="Not Defined" ruleSAFMsg="Iterator Usage Point" auth="mar" FirstElSrcRngEndPos="46">
      <Props>
        <Prop key="Tracked variables" val="Tracked iterators" />
        <Prop key="Tracked collections" val="Tracked collections" />
      </Props>
      <ElDescList>
        <ElDesc locRef="38" lineHash="1257407509" srcRnghash="590524020" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" srcRngEndLn="14" ln="14" srcRngEndPos="46" srcRngStartln="14" srcRngStartPos="8" desc="Iterator iter = collection.iterator();" ElType=".C" rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="38" lineHash="-1314484653" srcRnghash="590524020" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="8" desc="while (iter.hasNext()) {" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="38" lineHash="1860144441" srcRnghash="590524020" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" srcRngEndLn="16" ln="16" srcRngEndPos="41" srcRngStartln="16" srcRngStartPos="12" desc="Object element = iter.next();" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="38" lineHash="-1848798502" srcRnghash="590524020" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" srcRngEndLn="17" ln="17" srcRngEndPos="39" srcRngStartln="17" srcRngStartPos="12" desc="collection.remove(element);" ElType=".I" rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
        <ElDesc locRef="38" lineHash="-1314484653" srcRnghash="590524020" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" srcRngEndLn="15" ln="15" srcRngEndPos="29" srcRngStartln="15" srcRngStartPos="15" desc="iter.hasNext()" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="collection" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="2" ln="28" hash="590524020" tool="jtest" locEndLn="28" locType="sr" lnHash="-1314484653" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="'hasNext()' is called on the variable &quot;iter&quot; in the loop's condition, but 'next()' is never called on this variable in the loop's body" lang="java" risk="Undefined" lineHash="-1314484653" locRef="38" goals="0," locStartln="28" locStartPos="15" locFile="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" rule="PB.LOGIC.OAMC" locEndPos="19" prio="Not Defined" auth="mar" />
    <FlowViol sev="2" FirstElSrcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" ln="13" tool="jtest" lnHash="1476420430" lang="java" lineHash="1476420430" locRef="39" risk="Undefined" id="-906088855" locStartln="13" locStartPos="15" rule="BD.PB.CC" locEndPos="56" causeLocRef="39" FirstElSrcRngEndLn="9" hash="1367099558" FirstElSrcRngStartln="8" urgent="true" ruleSCSCMsg="Path start point" locEndLn="13" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="16" msg="Condition &quot;result instanceof RuntimeException&quot; always evaluates to false" goals="1," locFile="/demo/src/examples/flowanalysis/UnreachableCode.java" dumpId="29" prio="Not Defined" ruleSAFMsg="Point where Senseless Condition is Used" auth="mar" FirstElSrcRngEndPos="4">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc locRef="39" lineHash="1344222309" srcRnghash="1367099558" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" srcRngEndLn="9" ln="8" srcRngEndPos="4" srcRngStartln="8" srcRngStartPos="16" desc="printCalculationResult(Object result)" ElType=".C" rngLn="8">
          <Props />
        </ElDesc>
        <ElDesc locRef="39" lineHash="1532976715" srcRnghash="1367099558" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" srcRngEndLn="10" ln="10" srcRngEndPos="42" srcRngStartln="10" srcRngStartPos="8" desc="if (result instanceof Exception) {" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc locRef="39" lineHash="1476420430" srcRnghash="1367099558" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" srcRngEndLn="13" ln="13" srcRngEndPos="56" srcRngStartln="13" srcRngStartPos="15" desc="if (result instanceof RuntimeException) {" ElType=".P" rngLn="13">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="2" FirstElSrcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" ln="28" tool="jtest" lnHash="834780796" lang="java" lineHash="834780796" locRef="39" risk="Undefined" id="1618268432" locStartln="28" locStartPos="19" rule="BD.PB.CC" locEndPos="25" causeLocRef="39" FirstElSrcRngEndLn="22" hash="1367099558" FirstElSrcRngStartln="21" urgent="true" ruleSCSCMsg="Path start point" locEndLn="28" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="16" msg="Condition &quot;!round&quot; always evaluates to true" goals="1," locFile="/demo/src/examples/flowanalysis/UnreachableCode.java" dumpId="30" prio="Not Defined" ruleSAFMsg="Point where Senseless Condition is Used" auth="mar" FirstElSrcRngEndPos="4">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc locRef="39" lineHash="-805422857" srcRnghash="1367099558" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" srcRngEndLn="22" ln="21" srcRngEndPos="4" srcRngStartln="21" srcRngStartPos="16" desc="guessFigure(boolean round, boolean volumetric)" ElType=".C" rngLn="21">
          <Props />
        </ElDesc>
        <ElDesc locRef="39" lineHash="1554350844" srcRnghash="1367099558" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" srcRngEndLn="23" ln="23" srcRngEndPos="25" srcRngStartln="23" srcRngStartPos="8" desc="final int figure;" ElType="." rngLn="23">
          <Props />
        </ElDesc>
        <ElDesc locRef="39" lineHash="733119465" srcRnghash="1367099558" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" srcRngEndLn="24" ln="24" srcRngEndPos="34" srcRngStartln="24" srcRngStartPos="8" desc="if (round &amp;&amp; volumetric) {" ElType="." rngLn="24">
          <Props />
        </ElDesc>
        <ElDesc locRef="39" lineHash="2035781366" srcRnghash="1367099558" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" srcRngEndLn="26" ln="26" srcRngEndPos="42" srcRngStartln="26" srcRngStartPos="15" desc="if (round &amp;&amp; !volumetric) {" ElType="." rngLn="26">
          <Props />
        </ElDesc>
        <ElDesc locRef="39" lineHash="834780796" srcRnghash="1367099558" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UnreachableCode.java" srcRngEndLn="28" ln="28" srcRngEndPos="25" srcRngStartln="28" srcRngStartPos="19" desc="!round" ElType=".P" rngLn="28">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" ln="15" tool="jtest" lnHash="-1314484653" lang="java" lineHash="-1314484653" locRef="41" risk="Undefined" id="-1583637505" locStartln="15" locStartPos="15" rule="BD.CO.ITMOD" locEndPos="29" causeLocRef="41" FirstElSrcRngEndLn="14" ruleRIPMsg="Collection Modification Point" hash="1932743615" FirstElSrcRngStartln="14" urgent="true" ruleSCSCMsg="Iterator Creation Point" locEndLn="15" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="Iterator &quot;iter&quot; may possibly be used after iterated collection is modified" goals="1," locFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" dumpId="31" prio="Not Defined" ruleSAFMsg="Iterator Usage Point" auth="mar" FirstElSrcRngEndPos="48">
      <Props>
        <Prop key="Tracked variables" val="Tracked iterators" />
        <Prop key="Tracked collections" val="Tracked collections" />
      </Props>
      <ElDescList>
        <ElDesc locRef="41" lineHash="1164038477" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="14" ln="14" srcRngEndPos="48" srcRngStartln="14" srcRngStartPos="8" desc="Iterator iter = map.keySet().iterator();" ElType=".C" rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-1314484653" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="8" desc="while (iter.hasNext()) {" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-927722506" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="16" ln="16" srcRngEndPos="37" srcRngStartln="16" srcRngStartPos="12" desc="Object key = iter.next();" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-943711873" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="17" ln="17" srcRngEndPos="28" srcRngStartln="17" srcRngStartPos="12" desc="map.remove(key);" ElType=".I" rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-1314484653" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="15" ln="15" srcRngEndPos="29" srcRngStartln="15" srcRngStartPos="15" desc="iter.hasNext()" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" ln="28" tool="jtest" lnHash="-1314484653" lang="java" lineHash="-1314484653" locRef="41" risk="Undefined" id="-1285273270" locStartln="28" locStartPos="15" rule="BD.CO.ITMOD" locEndPos="29" causeLocRef="41" FirstElSrcRngEndLn="27" ruleRIPMsg="Collection Modification Point" hash="1932743615" FirstElSrcRngStartln="27" urgent="true" ruleSCSCMsg="Iterator Creation Point" locEndLn="28" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="Iterator &quot;iter&quot; may possibly be used after iterated collection is modified" goals="1," locFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" dumpId="32" prio="Not Defined" ruleSAFMsg="Iterator Usage Point" auth="mar" FirstElSrcRngEndPos="50">
      <Props>
        <Prop key="Tracked variables" val="Tracked iterators" />
        <Prop key="Tracked collections" val="Tracked collections" />
      </Props>
      <ElDescList>
        <ElDesc locRef="41" lineHash="37554394" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="27" ln="27" srcRngEndPos="50" srcRngStartln="27" srcRngStartPos="8" desc="Iterator iter = map.entrySet().iterator();" ElType=".C" rngLn="27">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-1314484653" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="29" ln="28" srcRngEndPos="0" srcRngStartln="28" srcRngStartPos="8" desc="while (iter.hasNext()) {" ElType="." rngLn="28">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-1978923439" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="29" ln="29" srcRngEndPos="53" srcRngStartln="29" srcRngStartPos="12" desc="Map.Entry entry = (Map.Entry)iter.next();" ElType="." rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-1719244368" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="30" ln="30" srcRngEndPos="40" srcRngStartln="30" srcRngStartPos="12" desc="Object key = entry.getKey();" ElType="." rngLn="30">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-943711873" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="31" ln="31" srcRngEndPos="28" srcRngStartln="31" srcRngStartPos="12" desc="map.remove(key);" ElType=".I" rngLn="31">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
        <ElDesc locRef="41" lineHash="-1314484653" srcRnghash="1932743615" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" srcRngEndLn="28" ln="28" srcRngEndPos="29" srcRngStartln="28" srcRngStartPos="15" desc="iter.hasNext()" ElType=".P" rngLn="28">
          <Props>
            <Prop key="Tracked variables" val="iter" />
            <Prop key="Tracked collections" val="map" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="2" ln="42" hash="1932743615" tool="jtest" locEndLn="42" locType="sr" lnHash="-1314484653" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="'hasNext()' is called on the variable &quot;iter&quot; in the loop's condition, but 'next()' is never called on this variable in the loop's body" lang="java" risk="Undefined" lineHash="-1314484653" locRef="41" goals="0," locStartln="42" locStartPos="15" locFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" rule="PB.LOGIC.OAMC" locEndPos="19" prio="Not Defined" auth="mar" />
    <StdViol sev="2" ln="54" hash="1932743615" tool="jtest" locEndLn="54" locType="sr" lnHash="-1314484653" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="'hasNext()' is called on the variable &quot;iter&quot; in the loop's condition, but 'next()' is never called on this variable in the loop's body" lang="java" risk="Undefined" lineHash="-1314484653" locRef="41" goals="0," locStartln="54" locStartPos="15" locFile="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" rule="PB.LOGIC.OAMC" locEndPos="19" prio="Not Defined" auth="mar" />
    <FlowViol sev="2" FirstElSrcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" ln="17" tool="jtest" lnHash="2035788877" lang="java" lineHash="2035788877" locRef="42" risk="Undefined" id="-112331005" locStartln="17" locStartPos="15" rule="BD.PB.CC" locEndPos="38" causeLocRef="42" FirstElSrcRngEndLn="13" hash="-798223982" FirstElSrcRngStartln="12" urgent="true" ruleSCSCMsg="Path start point" locEndLn="17" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="24" msg="Condition &quot;code == 0&quot; always evaluates to false" goals="1," locFile="/demo/src/examples/flowanalysis/DivisionByZero.java" dumpId="33" prio="Not Defined" ruleSAFMsg="Point where Senseless Condition is Used" auth="mar" FirstElSrcRngEndPos="4">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc locRef="42" lineHash="345077535" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="13" ln="12" srcRngEndPos="4" srcRngStartln="12" srcRngStartPos="24" desc="calculateDiscountedSum(int code, float initialSum, Consumer person)" ElType=".C" rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="-1076318677" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="14" ln="14" srcRngEndPos="71" srcRngStartln="14" srcRngStartPos="8" desc="float discountedSum = calculateCommonDiscountedSum(initialSum);" ElType="." rngLn="14">
          <ElDescList>
            <ElDesc locRef="42" lineHash="1694878475" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="38" ln="38" srcRngEndPos="35" srcRngStartln="38" srcRngStartPos="8" desc="float discountedSum = 0.0f;" ElType="." rngLn="38">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-167050145" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="39" ln="39" srcRngEndPos="32" srcRngStartln="39" srcRngStartPos="8" desc="if (initialSum > 5.0f) {" ElType="." rngLn="39">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-847108515" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="42" ln="42" srcRngEndPos="32" srcRngStartln="42" srcRngStartPos="8" desc="if (initialSum &lt; 5.0f) {" ElType="." rngLn="42">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-184886784" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="45" ln="45" srcRngEndPos="29" srcRngStartln="45" srcRngStartPos="8" desc="return discountedSum;" ElType="." rngLn="45">
              <Props />
            </ElDesc>
          </ElDescList>
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="424308118" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="16" ln="16" srcRngEndPos="40" srcRngStartln="16" srcRngStartPos="8" desc="if (code == PERSONAL_DISCOUNT) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="2035788877" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="17" ln="17" srcRngEndPos="38" srcRngStartln="17" srcRngStartPos="15" desc="if (code == DISCOUNT) {" ElType=".P" rngLn="17">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="1" ln="17" hash="-798223982" tool="jtest" locEndLn="17" locType="sr" lnHash="2035788877" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="The &quot;else&quot; condition always evaluates to &quot;false&quot; because of previous branches" lang="java" risk="Undefined" lineHash="2035788877" locRef="42" goals="0," locStartln="17" locStartPos="19" locFile="/demo/src/examples/flowanalysis/DivisionByZero.java" rule="PB.USC.UIF" locEndPos="35" prio="Not Defined" auth="mar" />
    <FlowViol sev="2" FirstElSrcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" ln="18" tool="jtest" lnHash="-1311457596" lang="java" lineHash="-1311457596" locRef="42" risk="Undefined" id="-1502079495" locStartln="18" locStartPos="15" rule="BD.PB.CC" locEndPos="43" causeLocRef="42" FirstElSrcRngEndLn="13" hash="-798223982" FirstElSrcRngStartln="12" urgent="true" ruleSCSCMsg="Path start point" locEndLn="18" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="24" msg="Condition &quot;code == 0&quot; always evaluates to false" goals="1," locFile="/demo/src/examples/flowanalysis/DivisionByZero.java" dumpId="34" prio="Not Defined" ruleSAFMsg="Point where Senseless Condition is Used" auth="mar" FirstElSrcRngEndPos="4">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc locRef="42" lineHash="345077535" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="13" ln="12" srcRngEndPos="4" srcRngStartln="12" srcRngStartPos="24" desc="calculateDiscountedSum(int code, float initialSum, Consumer person)" ElType=".C" rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="-1076318677" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="14" ln="14" srcRngEndPos="71" srcRngStartln="14" srcRngStartPos="8" desc="float discountedSum = calculateCommonDiscountedSum(initialSum);" ElType="." rngLn="14">
          <ElDescList>
            <ElDesc locRef="42" lineHash="1694878475" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="38" ln="38" srcRngEndPos="35" srcRngStartln="38" srcRngStartPos="8" desc="float discountedSum = 0.0f;" ElType="." rngLn="38">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-167050145" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="39" ln="39" srcRngEndPos="32" srcRngStartln="39" srcRngStartPos="8" desc="if (initialSum > 5.0f) {" ElType="." rngLn="39">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-847108515" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="42" ln="42" srcRngEndPos="32" srcRngStartln="42" srcRngStartPos="8" desc="if (initialSum &lt; 5.0f) {" ElType="." rngLn="42">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-184886784" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="45" ln="45" srcRngEndPos="29" srcRngStartln="45" srcRngStartPos="8" desc="return discountedSum;" ElType="." rngLn="45">
              <Props />
            </ElDesc>
          </ElDescList>
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="424308118" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="16" ln="16" srcRngEndPos="40" srcRngStartln="16" srcRngStartPos="8" desc="if (code == PERSONAL_DISCOUNT) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="2035788877" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="17" ln="17" srcRngEndPos="38" srcRngStartln="17" srcRngStartPos="15" desc="if (code == DISCOUNT) {" ElType="." rngLn="17">
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="-1311457596" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="18" ln="18" srcRngEndPos="43" srcRngStartln="18" srcRngStartPos="15" desc="if (code == SPECIAL_OFFER) {" ElType=".P" rngLn="18">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="1" ln="18" hash="-798223982" tool="jtest" locEndLn="18" locType="sr" lnHash="-1311457596" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="The &quot;else&quot; condition always evaluates to &quot;false&quot; because of previous branches" lang="java" risk="Undefined" lineHash="-1311457596" locRef="42" goals="0," locStartln="18" locStartPos="19" locFile="/demo/src/examples/flowanalysis/DivisionByZero.java" rule="PB.USC.UIF" locEndPos="40" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" ln="23" tool="jtest" lnHash="203027039" lang="java" lineHash="203027039" locRef="42" risk="Undefined" id="1651784646" locStartln="23" locStartPos="12" rule="BD.PB.ZERO" locEndPos="75" causeLocRef="42" FirstElSrcRngEndLn="13" hash="-798223982" FirstElSrcRngStartln="12" urgent="true" ruleSCSCMsg="Path start point" locEndLn="23" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="24" msg="&quot;discountedSum&quot; may possibly be zero" goals="1," locFile="/demo/src/examples/flowanalysis/DivisionByZero.java" dumpId="35" prio="Not Defined" ruleSAFMsg="Point of Division by Zero" auth="mar" FirstElSrcRngEndPos="4">
      <Props>
        <Prop key="Tracked variables" val="" />
      </Props>
      <ElDescList>
        <ElDesc locRef="42" lineHash="345077535" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="13" ln="12" srcRngEndPos="4" srcRngStartln="12" srcRngStartPos="24" desc="calculateDiscountedSum(int code, float initialSum, Consumer person)" ElType=".C" rngLn="12">
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="-1076318677" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="14" ln="14" srcRngEndPos="71" srcRngStartln="14" srcRngStartPos="8" desc="float discountedSum = calculateCommonDiscountedSum(initialSum);" ElType="." rngLn="14">
          <ElDescList>
            <ElDesc locRef="42" lineHash="1694878475" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="38" ln="38" srcRngEndPos="35" srcRngStartln="38" srcRngStartPos="8" desc="float discountedSum = 0.0f;" ElType="." rngLn="38">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-167050145" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="39" ln="39" srcRngEndPos="32" srcRngStartln="39" srcRngStartPos="8" desc="if (initialSum > 5.0f) {" ElType="." rngLn="39">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-847108515" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="42" ln="42" srcRngEndPos="32" srcRngStartln="42" srcRngStartPos="8" desc="if (initialSum &lt; 5.0f) {" ElType="." rngLn="42">
              <Props />
            </ElDesc>
            <ElDesc locRef="42" lineHash="-184886784" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="45" ln="45" srcRngEndPos="29" srcRngStartln="45" srcRngStartPos="8" desc="return discountedSum;" ElType="." rngLn="45">
              <Props />
            </ElDesc>
          </ElDescList>
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="424308118" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="16" ln="16" srcRngEndPos="40" srcRngStartln="16" srcRngStartPos="8" desc="if (code == PERSONAL_DISCOUNT) {" ElType="." rngLn="16">
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="424308118" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="22" ln="22" srcRngEndPos="40" srcRngStartln="22" srcRngStartPos="8" desc="if (code == PERSONAL_DISCOUNT) {" ElType="." rngLn="22">
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="203027039" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="23" ln="23" srcRngEndPos="58" srcRngStartln="23" srcRngStartPos="36" desc="person.getOverallSum()" ElType="." rngLn="23">
          <ElDescList>
            <ElDesc locRef="42" lineHash="954365038" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="65" ln="65" srcRngEndPos="31" srcRngStartln="65" srcRngStartPos="12" desc="return _overallSum;" ElType="." rngLn="65">
              <Props />
            </ElDesc>
          </ElDescList>
          <Props />
        </ElDesc>
        <ElDesc locRef="42" lineHash="203027039" srcRnghash="-798223982" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/DivisionByZero.java" srcRngEndLn="23" ln="23" srcRngEndPos="75" srcRngStartln="23" srcRngStartPos="12" desc="float progressionCoef = person.getOverallSum() / discountedSum;" ElType=".P" rngLn="23">
          <Props />
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="53" hash="-798223982" tool="jtest" locEndLn="53" locType="sr" lnHash="29838782" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.rulewizard" msg="Member class could be declared &quot;static&quot;: Consumer" lang="java" risk="Undefined" lineHash="29838782" locRef="42" goals="0," locStartln="53" locStartPos="10" locFile="/demo/src/examples/flowanalysis/DivisionByZero.java" rule="OPT.SI" locEndPos="18" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/UseBeforeInitialization.java" ln="22" tool="jtest" lnHash="1794515364" lang="java" lineHash="1794515364" locRef="43" risk="Undefined" id="-2064297745" locStartln="22" locStartPos="21" rule="BD.RES.LEAKS" locEndPos="70" causeLocRef="43" FirstElSrcRngEndLn="22" hash="-180062161" FirstElSrcRngStartln="22" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="22" locType="sr" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="43" msg="Stream not closed: new FileInputStream(&quot;...&quot;)" goals="1," locFile="/demo/src/examples/flowanalysis/UseBeforeInitialization.java" dumpId="36" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="69">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="43" lineHash="274607265" srcRnghash="-180062161" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInitialization.java" srcRngEndLn="20" ln="20" srcRngEndPos="40" srcRngStartln="20" srcRngStartPos="8" desc="ObjectInputStream source = null;" ElType="." rngLn="20">
          <Props />
        </ElDesc>
        <ElDesc locRef="43" lineHash="1794515364" srcRnghash="-180062161" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/UseBeforeInitialization.java" srcRngEndLn="22" ln="22" srcRngEndPos="70" srcRngStartln="22" srcRngStartPos="21" desc="new ObjectInputStream(new FileInputStream(&quot;...&quot;))" ElType="ECP" rngLn="22" thrownTypes="IOException" throwingMethod="ObjectInputStream.ObjectInputStream">
          <Props>
            <Prop key="Tracked variables" val="new FileInputStream(&quot;...&quot;)" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="57" hash="-180062161" tool="jtest" locEndLn="57" locType="sr" lnHash="814465193" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.rulewizard" msg="Member class could be declared &quot;static&quot;: ValueStorage" lang="java" risk="Undefined" lineHash="814465193" locRef="43" goals="0," locStartln="57" locStartPos="17" locFile="/demo/src/examples/flowanalysis/UseBeforeInitialization.java" rule="OPT.SI" locEndPos="29" prio="Not Defined" auth="mar" />
    <StdViol sev="3" ln="17" hash="1051480615" tool="jtest" locEndLn="17" locType="sr" lnHash="-1032022773" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'value' is never used" lang="java" risk="Undefined" lineHash="-1032022773" locRef="44" goals="0," locStartln="17" locStartPos="19" locFile="/demo/src/examples/flowanalysis/InefficientMapUsage.java" rule="UC.AURV" locEndPos="24" prio="Not Defined" auth="mar" />
    <StdViol sev="3" ln="31" hash="1051480615" tool="jtest" locEndLn="31" locType="sr" lnHash="-1719244368" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'key' is never used" lang="java" risk="Undefined" lineHash="-1719244368" locRef="44" goals="0," locStartln="31" locStartPos="19" locFile="/demo/src/examples/flowanalysis/InefficientMapUsage.java" rule="UC.AURV" locEndPos="22" prio="Not Defined" auth="mar" />
    <StdViol sev="3" ln="32" hash="1051480615" tool="jtest" locEndLn="32" locType="sr" lnHash="-518523280" pkg="examples.flowanalysis" analyzer="com.parasoft.jtest.standards.checkers.java" msg="Variable 'value' is never used" lang="java" risk="Undefined" lineHash="-518523280" locRef="44" goals="0," locStartln="32" locStartPos="19" locFile="/demo/src/examples/flowanalysis/InefficientMapUsage.java" rule="UC.AURV" locEndPos="24" prio="Not Defined" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" ln="20" tool="jtest" lnHash="-1543564921" lang="java" lineHash="-1543564921" locRef="47" risk="Undefined" id="-693402098" locStartln="20" locStartPos="15" rule="BD.EXCEPT.NP" locEndPos="34" causeLocRef="47" FirstElSrcRngEndLn="10" hash="-1912888609" FirstElSrcRngStartln="10" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="20" locType="sr" pkg="examples.flowanalysis.np" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;sFirstLine&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/np/NullPointer.java" dumpId="37" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="33">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="47" lineHash="-989328207" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="10" ln="10" srcRngEndPos="33" srcRngStartln="10" srcRngStartPos="8" desc="String sFirstLine = null;" ElType=".C" rngLn="10">
          <Props>
            <Prop key="Tracked variables" val="sFirstLine" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="191709394" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="11" ln="11" srcRngEndPos="37" srcRngStartln="11" srcRngStartPos="8" desc="BufferedReader reader = null;" ElType="." rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="sFirstLine" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="-1664407388" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="13" ln="13" srcRngEndPos="65" srcRngStartln="13" srcRngStartPos="40" desc="new FileReader(sFileName)" ElType="!E" rngLn="13" thrownTypes="FileNotFoundException" throwingMethod="FileReader.FileReader">
          <Props>
            <Prop key="Tracked variables" val="sFirstLine" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="100324464" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="15" ln="15" srcRngEndPos="30" srcRngStartln="15" srcRngStartPos="10" desc="catch (Exception e)" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="sFirstLine" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="-747252483" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="16" ln="16" srcRngEndPos="69" srcRngStartln="16" srcRngStartPos="12" desc="System.out.println(&quot;Exception occured. &quot; + e.toString());" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="sFirstLine" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="853738085" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="18" ln="18" srcRngEndPos="26" srcRngStartln="18" srcRngStartPos="12" desc="close(reader);" ElType="." rngLn="18">
          <Props>
            <Prop key="Tracked variables" val="sFirstLine" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="-1543564921" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="20" ln="20" srcRngEndPos="34" srcRngStartln="20" srcRngStartPos="15" desc="sFirstLine.length()" ElType=".P" rngLn="20">
          <Props>
            <Prop key="Tracked variables" val="sFirstLine" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" ln="26" tool="jtest" lnHash="-2039937235" lang="java" lineHash="-2039937235" locRef="47" risk="Undefined" id="663054357" locStartln="26" locStartPos="12" rule="BD.EXCEPT.NP" locEndPos="27" causeLocRef="47" FirstElSrcRngEndLn="11" hash="-1912888609" FirstElSrcRngStartln="11" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="26" locType="sr" pkg="examples.flowanalysis.np" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;reader&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/np/NullPointer.java" dumpId="38" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="37">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="47" lineHash="-989328207" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="10" ln="10" srcRngEndPos="33" srcRngStartln="10" srcRngStartPos="8" desc="String sFirstLine = null;" ElType="." rngLn="10">
          <Props />
        </ElDesc>
        <ElDesc locRef="47" lineHash="191709394" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="11" ln="11" srcRngEndPos="37" srcRngStartln="11" srcRngStartPos="8" desc="BufferedReader reader = null;" ElType=".C" rngLn="11">
          <Props>
            <Prop key="Tracked variables" val="reader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="-1664407388" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="13" ln="13" srcRngEndPos="65" srcRngStartln="13" srcRngStartPos="40" desc="new FileReader(sFileName)" ElType="!E" rngLn="13" thrownTypes="FileNotFoundException" throwingMethod="FileReader.FileReader">
          <Props>
            <Prop key="Tracked variables" val="reader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="100324464" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="15" ln="15" srcRngEndPos="30" srcRngStartln="15" srcRngStartPos="10" desc="catch (Exception e)" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="reader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="-747252483" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="16" ln="16" srcRngEndPos="69" srcRngStartln="16" srcRngStartPos="12" desc="System.out.println(&quot;Exception occured. &quot; + e.toString());" ElType="." rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="reader" />
          </Props>
        </ElDesc>
        <ElDesc locRef="47" lineHash="853738085" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="18" ln="18" srcRngEndPos="26" srcRngStartln="18" srcRngStartPos="12" desc="close(reader);" ElType="!" rngLn="18">
          <ElDescList>
            <ElDesc locRef="47" lineHash="-2039937235" srcRnghash="-1912888609" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/NullPointer.java" srcRngEndLn="26" ln="26" srcRngEndPos="27" srcRngStartln="26" srcRngStartPos="12" desc="reader.close();" ElType=".P" rngLn="26">
              <Props>
                <Prop key="Tracked variables" val="reader" />
              </Props>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="reader" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol sev="3" ln="7" hash="34666450" tool="jtest" locEndLn="7" locType="sr" lnHash="571087632" pkg="examples.flowanalysis.np" analyzer="com.parasoft.jtest.standards.checkers.rulewizard" msg="Member class could be declared &quot;static&quot;: Name" lang="java" lineHash="571087632" locRef="48" goals="0," locStartln="7" locStartPos="18" locFile="/demo/src/examples/flowanalysis/np/SimpleNeverHappenedAndNotAcknowledgedByBD.java" rule="OPT.SI" locEndPos="22" auth="mar" />
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/flowanalysis/np/MyDictionary.java" ln="20" tool="jtest" lnHash="-1504762512" lang="java" lineHash="-1504762512" locRef="49" risk="Undefined" id="-182007423" locStartln="20" locStartPos="8" rule="BD.EXCEPT.NP" locEndPos="32" causeLocRef="49" FirstElSrcRngEndLn="16" hash="359238969" FirstElSrcRngStartln="16" urgent="true" ruleSCSCMsg="Source of Null Value" locEndLn="20" locType="sr" pkg="examples.flowanalysis.np" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="8" msg="&quot;strKey&quot; may possibly be null" goals="1," locFile="/demo/src/examples/flowanalysis/np/MyDictionary.java" dumpId="39" prio="Not Defined" ruleSAFMsg="NullPointerException Point" auth="mar" FirstElSrcRngEndPos="29">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc locRef="49" lineHash="-1935852018" srcRnghash="359238969" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/MyDictionary.java" srcRngEndLn="16" ln="16" srcRngEndPos="29" srcRngStartln="16" srcRngStartPos="8" desc="String strKey = null;" ElType=".C" rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="strKey" />
          </Props>
        </ElDesc>
        <ElDesc locRef="49" lineHash="1183172741" srcRnghash="359238969" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/MyDictionary.java" srcRngEndLn="17" ln="17" srcRngEndPos="36" srcRngStartln="17" srcRngStartPos="8" desc="if (key instanceof String) {" ElType="." rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="strKey" />
          </Props>
        </ElDesc>
        <ElDesc locRef="49" lineHash="-1504762512" srcRnghash="359238969" locType="sr" srcRngFile="/demo/src/examples/flowanalysis/np/MyDictionary.java" srcRngEndLn="20" ln="20" srcRngEndPos="32" srcRngStartln="20" srcRngStartPos="8" desc="dict.put(strKey, value);" ElType=".P" rngLn="20">
          <Props>
            <Prop key="Tracked variables" val="strKey" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol sev="1" FirstElSrcRngFile="/demo/src/examples/stubs/ConstructorExample.java" ln="14" tool="jtest" lnHash="30537853" lang="java" lineHash="30537853" locRef="53" risk="Undefined" id="1228750743" locStartln="14" locStartPos="4" rule="BD.RES.LEAKS" locEndPos="5" causeLocRef="53" FirstElSrcRngEndLn="12" hash="-2126764651" FirstElSrcRngStartln="12" urgent="true" ruleSCSCMsg="Point where the Resource is Allocated" locEndLn="14" locType="sr" pkg="examples.stubs" analyzer="com.parasoft.jtest.flowanalyzer" FirstElSrcRngStartPos="32" msg="File not closed: file" goals="1," locFile="/demo/src/examples/stubs/ConstructorExample.java" dumpId="40" prio="Not Defined" ruleSAFMsg="Point where the Allocated Resource is Lost" auth="mar" FirstElSrcRngEndPos="65">
      <Props>
        <Prop key="Tracked variables" val="Allocated resource variable" />
      </Props>
      <ElDescList>
        <ElDesc locRef="53" lineHash="131931131" srcRnghash="-2126764651" locType="sr" srcRngFile="/demo/src/examples/stubs/ConstructorExample.java" srcRngEndLn="12" ln="12" srcRngEndPos="66" srcRngStartln="12" srcRngStartPos="8" desc="RandomAccessFile file = new RandomAccessFile (path, &quot;rw&quot;);" ElType=".C" rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="new RandomAccessFile (path, &quot;rw&quot;)" />
          </Props>
        </ElDesc>
        <ElDesc locRef="53" lineHash="1672104930" srcRnghash="-2126764651" locType="sr" srcRngFile="/demo/src/examples/stubs/ConstructorExample.java" srcRngEndLn="13" ln="13" srcRngEndPos="29" srcRngStartln="13" srcRngStartPos="15" desc="file.length ()" ElType="!E" rngLn="13" thrownTypes="IOException" throwingMethod="RandomAccessFile.length">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
        </ElDesc>
        <ElDesc locRef="53" lineHash="30537853" srcRnghash="-2126764651" locType="sr" srcRngFile="/demo/src/examples/stubs/ConstructorExample.java" srcRngEndLn="14" ln="14" srcRngEndPos="5" srcRngStartln="14" srcRngStartPos="4" desc="}" ElType=".P" rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
        </ElDesc>
      </ElDescList>
    </FlowViol>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Suppressed / Total" supp="0" total="74">
            <Project name="com.parasoft:demo" supp="0" total="74">
               <Res name="src" supp="0" total="74">
                  <Res name="examples" supp="0" total="74">
                     <Res name="servlets" supp="0" total="2">
                        <Res loc="/demo/src/examples/servlets/ExampleServlet.java" locRef="1" locType="sr" name="ExampleServlet.java" supp="0" total="2" />
                     </Res>
                     <Res name="security" supp="0" total="5">
                        <Res loc="/demo/src/examples/security/InputValidation.java" locRef="2" locType="sr" name="InputValidation.java" supp="0" total="5" />
                     </Res>
                     <Res name="queue" supp="0" total="2">
                        <Res loc="/demo/src/examples/queue/Queue.java" locRef="3" locType="sr" name="Queue.java" supp="0" total="2" />
                     </Res>
                     <Res name="nbank" supp="0" total="12">
                        <Res loc="/demo/src/examples/nbank/Customer.java" locRef="4" locType="sr" name="Customer.java" supp="0" total="5" />
                        <Res loc="/demo/src/examples/nbank/ConnectionException.java" locRef="5" locType="sr" name="ConnectionException.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/nbank/ITransaction.java" locRef="6" locType="sr" name="ITransaction.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/nbank/LogAccountInfo.java" locRef="7" locType="sr" name="LogAccountInfo.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/nbank/DepositTransaction.java" locRef="8" locType="sr" name="DepositTransaction.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/nbank/AbstractTransaction.java" locRef="9" locType="sr" name="AbstractTransaction.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/nbank/CreditCard.java" locRef="10" locType="sr" name="CreditCard.java" supp="0" total="1" />
                        <Res loc="/demo/src/examples/nbank/WithdrawalTransaction.java" locRef="11" locType="sr" name="WithdrawalTransaction.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/nbank/Account.java" locRef="12" locType="sr" name="Account.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/nbank/Bank.java" locRef="13" locType="sr" name="Bank.java" supp="0" total="0" />
                     </Res>
                     <Res name="stackmachine" supp="0" total="1">
                        <Res loc="/demo/src/examples/stackmachine/RunnableStackMachine.java" locRef="14" locType="sr" name="RunnableStackMachine.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/stackmachine/AbstractStackMachine.java" locRef="15" locType="sr" name="AbstractStackMachine.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/stackmachine/CommandLineStackMachine.java" locRef="16" locType="sr" name="CommandLineStackMachine.java" supp="0" total="1" />
                        <Res loc="/demo/src/examples/stackmachine/LifoStackMachine.java" locRef="17" locType="sr" name="LifoStackMachine.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/stackmachine/StackInterface.java" locRef="18" locType="sr" name="StackInterface.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/stackmachine/StackList.java" locRef="19" locType="sr" name="StackList.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/stackmachine/FifoStackMachine.java" locRef="20" locType="sr" name="FifoStackMachine.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/stackmachine/CustomListRenderer.java" locRef="21" locType="sr" name="CustomListRenderer.java" supp="0" total="0" />
                     </Res>
                     <Res name="metrics" supp="0" total="1">
                        <Res loc="/demo/src/examples/metrics/MetricsExample.java" locRef="22" locType="sr" name="MetricsExample.java" supp="0" total="1" />
                     </Res>
                     <Res name="eval" supp="0" total="2">
                        <Res loc="/demo/src/examples/eval/Simple.java" locRef="23" locType="sr" name="Simple.java" supp="0" total="2" />
                     </Res>
                     <Res name="flowanalysis" supp="0" total="48">
                        <Res loc="/demo/src/examples/flowanalysis/AlwaysCloseLogging.java" locRef="24" locType="sr" name="AlwaysCloseLogging.java" supp="0" total="1" />
                        <Res loc="/demo/src/examples/flowanalysis/UseBeforeInConstructorInitialization.java" locRef="25" locType="sr" name="UseBeforeInConstructorInitialization.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/flowanalysis/AlwaysCloseGSS.java" locRef="26" locType="sr" name="AlwaysCloseGSS.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/flowanalysis/WebApplication.java" locRef="27" locType="sr" name="WebApplication.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/flowanalysis/AlwaysCloseXMLEncDec.java" locRef="28" locType="sr" name="AlwaysCloseXMLEncDec.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/flowanalysis/AlwaysCloseRAFs.java" locRef="29" locType="sr" name="AlwaysCloseRAFs.java" supp="0" total="4" />
                        <Res loc="/demo/src/examples/flowanalysis/SQLInjection.java" locRef="30" locType="sr" name="SQLInjection.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/flowanalysis/FilesInjection.java" locRef="31" locType="sr" name="FilesInjection.java" supp="0" total="1" />
                        <Res loc="/demo/src/examples/flowanalysis/AlwaysCloseSockets.java" locRef="32" locType="sr" name="AlwaysCloseSockets.java" supp="0" total="3" />
                        <Res loc="/demo/src/examples/flowanalysis/AlwaysCloseNIOChannels.java" locRef="33" locType="sr" name="AlwaysCloseNIOChannels.java" supp="0" total="7" />
                        <Res loc="/demo/src/examples/flowanalysis/IncorrectIteratorUsage.java" locRef="34" locType="sr" name="IncorrectIteratorUsage.java" supp="0" total="1" />
                        <Res loc="/demo/src/examples/flowanalysis/XMLInjection.java" locRef="35" locType="sr" name="XMLInjection.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/flowanalysis/DereferenceBeforeNullCheck.java" locRef="36" locType="sr" name="DereferenceBeforeNullCheck.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/flowanalysis/AlwaysCloseImages.java" locRef="37" locType="sr" name="AlwaysCloseImages.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/flowanalysis/InefficientCollectionRemoval.java" locRef="38" locType="sr" name="InefficientCollectionRemoval.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/flowanalysis/UnreachableCode.java" locRef="39" locType="sr" name="UnreachableCode.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/flowanalysis/SystemInjection.java" locRef="40" locType="sr" name="SystemInjection.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/flowanalysis/InefficientMapRemoval.java" locRef="41" locType="sr" name="InefficientMapRemoval.java" supp="0" total="4" />
                        <Res loc="/demo/src/examples/flowanalysis/DivisionByZero.java" locRef="42" locType="sr" name="DivisionByZero.java" supp="0" total="6" />
                        <Res loc="/demo/src/examples/flowanalysis/UseBeforeInitialization.java" locRef="43" locType="sr" name="UseBeforeInitialization.java" supp="0" total="2" />
                        <Res loc="/demo/src/examples/flowanalysis/InefficientMapUsage.java" locRef="44" locType="sr" name="InefficientMapUsage.java" supp="0" total="3" />
                        <Res name="np" supp="0" total="4">
                           <Res loc="/demo/src/examples/flowanalysis/np/ExtendedNullPointer.java" locRef="45" locType="sr" name="ExtendedNullPointer.java" supp="0" total="0" />
                           <Res loc="/demo/src/examples/flowanalysis/np/MessageFormatter.java" locRef="46" locType="sr" name="MessageFormatter.java" supp="0" total="0" />
                           <Res loc="/demo/src/examples/flowanalysis/np/NullPointer.java" locRef="47" locType="sr" name="NullPointer.java" supp="0" total="2" />
                           <Res loc="/demo/src/examples/flowanalysis/np/SimpleNeverHappenedAndNotAcknowledgedByBD.java" locRef="48" locType="sr" name="SimpleNeverHappenedAndNotAcknowledgedByBD.java" supp="0" total="1" />
                           <Res loc="/demo/src/examples/flowanalysis/np/MyDictionary.java" locRef="49" locType="sr" name="MyDictionary.java" supp="0" total="1" />
                           <Res loc="/demo/src/examples/flowanalysis/np/DatabaseObject.java" locRef="50" locType="sr" name="DatabaseObject.java" supp="0" total="0" />
                        </Res>
                     </Res>
                     <Res name="stubs" supp="0" total="1">
                        <Res loc="/demo/src/examples/stubs/Interpreter.java" locRef="51" locType="sr" name="Interpreter.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/stubs/FileExample.java" locRef="52" locType="sr" name="FileExample.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/stubs/ConstructorExample.java" locRef="53" locType="sr" name="ConstructorExample.java" supp="0" total="1" />
                     </Res>
                     <Res name="suppress" supp="0" total="0">
                        <Res loc="/demo/src/examples/suppress/Example.java" locRef="54" locType="sr" name="Example.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/suppress/AllFileSuppress.java" locRef="55" locType="sr" name="AllFileSuppress.java" supp="0" total="0" />
                     </Res>
                     <Res name="junit4" supp="0" total="0">
                        <Res loc="/demo/src/examples/junit4/Money.java" locRef="56" locType="sr" name="Money.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/junit4/IMoney.java" locRef="57" locType="sr" name="IMoney.java" supp="0" total="0" />
                        <Res loc="/demo/src/examples/junit4/MoneyBag.java" locRef="58" locType="sr" name="MoneyBag.java" supp="0" total="0" />
                     </Res>
                  </Res>
               </Res>
               <Res name="META-INF" supp="0" total="0">
                  <Res loc="/demo/META-INF/MANIFEST.MF" locRef="59" locType="sr" name="MANIFEST.MF" supp="0" total="0" />
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
